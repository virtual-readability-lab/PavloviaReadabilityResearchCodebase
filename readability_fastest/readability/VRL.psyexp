<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'Welcome to Virtual Reading Test!': 'Please wait for resources to download and then click OK'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="True" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="['welcomeText.png', 'next_button.png', 'fonts/ArialFont.woff', 'fonts/Garamond.woff', 'fonts/LexendDeca.woff', 'fonts/Montserrat.woff', 'fonts/NotoSans.woff', 'fonts/Roboto.woff', 'fonts/TimesNew.woff', 'stimuli/testFastest.xlsx', 'stimuli/demographics.xlsx', 'bank-1300155_640.png', 'blocks/blocks_1.xlsx']" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="pix" valType="str" updates="None" name="Units"/>
    <Param val="2022.2.3" valType="str" updates="None" name="Use version"/>
    <Param val="[1680, 1050]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="white" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="Welcome to Virtual Reading Test!" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="instructions_questions">
      <TextComponent name="text_2">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You've finished reading this passage.&amp;#10;&amp;#10;In the next section, you will answer multiple choice questions about the passage.&amp;#10;&amp;#10;Click on the answer you think best suits the passage.&amp;#10;&amp;#10;Please press the button below to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_4">
        <Param val="'y','n','left','right','space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_4" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_5">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="text_2.setAlignHoriz(&quot;left&quot;);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_5" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_questionInstructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_questionInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseQuestionInstructions">
        <Param val="nextButton_questionInstructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseQuestionInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="setBlockParameters">
      <CodeComponent name="blockParameters">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// block information (get from the blocks file)&amp;#10;blockFileName    = thisBlock['stimulus_file']   // name of the excel file that contains stim set for the block&amp;#10;dotIndex         = blockFileName.indexOf(&quot;.&quot;);&amp;#10;blockName        = blockFileName.slice(0, (dotIndex));      // remove .xlsx from the file name&amp;#10;blockName        = blockName.substring(8)                  // remove &quot;stimuli/&quot; text from the block name&amp;#10;&amp;#10;// practice and test trials, fonts and their names (get from the blocks file)&amp;#10;practiceCount    = thisBlock['practiceTrials']; // how many practice trials&amp;#10;testCount        = thisBlock['testTrials'];     // how many test trials&amp;#10;blockFonts       = thisBlock['testFonts'];  // which fonts will be used in this block as test fonts&amp;#10;practiceFonts    = thisBlock['practiceFonts'] // get the practice font&amp;#10;blockFontLabels  = thisBlock['fontLabels']&amp;#10;blockFontLabels  = blockFontLabels.split(&quot;;&quot;)&amp;#10;blockFonts       = blockFonts.split(&quot;;&quot;)&amp;#10;blockFontCount   = blockFonts.length;&amp;#10;repFontTrials    = testCount / blockFontCount; // these two have to be divisible&amp;#10;&amp;#10;getFastestFont = [];&amp;#10;for (var i = 0; i &lt; blockFontCount; i++) {&amp;#10;  getFastestFont[blockFonts[i]] = [0,0];&amp;#10;}&amp;#10;console.log('fastest fonts',getFastestFont)&amp;#10;&amp;#10;// reproduce block fonts in an array to match the trial count &amp;#10;// e.g. blockFonts = [&quot;arial&quot;, &quot;helvetica&quot;], repFontTrials = 2&amp;#10;// new block font variable: blockFonts = [&quot;arial&quot;, &quot;helvetica&quot;, &quot;arial&quot;, &quot;helvetica&quot;];&amp;#10;blockFontsForDisplay = [];&amp;#10;for (var i = 0; i &lt; repFontTrials; i++) {&amp;#10;  blockFontsForDisplay = blockFontsForDisplay.concat(blockFonts);&amp;#10;}&amp;#10;&amp;#10;// counterbalance order of font weights&amp;#10;blockFontsForDisplay   = balancedLatinSquare(blockFontsForDisplay,PID);&amp;#10;// [&quot;arial&quot;, &quot;helvetica&quot;, &quot;arial&quot;, &quot;helvetica&quot;]&amp;#10;// [&quot;arial&quot;, &quot;arial&quot;, &quot;helvetica&quot;, &quot;helvetica&quot;] = (group 'A') = (PID = 0)&amp;#10;// [&quot;arial&quot;,&quot;helvetica&quot;, &quot;helvetica&quot;, &quot;arial&quot;] = (group 'B') = (PID = 1) etc. &amp;#10;&amp;#10;// add the practice font to the beginning of the counterbalanced font order&amp;#10;blockFontsForDisplay.unshift(practiceFonts); &amp;#10;console.log(&quot;displayed fonts&quot;)&amp;#10;console.log(blockFontsForDisplay)&amp;#10;// counterbalance order of passage sets&amp;#10;passageSetIndices = range(1,testCount);&amp;#10;passageSetOrder   = balancedLatinSquare(passageSetIndices,PID);&amp;#10;&amp;#10;// always show the practice trial (0 index) the first, so we concatenate the latin-square&amp;#10;// balanced array to 0. &amp;#10;passageSetOrder.unshift(0);&amp;#10;&amp;#10;// block iteration index&amp;#10;blockIteration = thisBlock.thisN;&amp;#10;&amp;#10;// initiate/reset trial iteration index&amp;#10;trialIteration = -1;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="blockParameters" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="initializeVariables"/>
    <Routine name="initialize">
      <CodeComponent name="functionsOnly">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// randomly generate letters from an array&amp;#10;&amp;#10;function makeid2() {&amp;#10;  var text = &quot;&quot;;&amp;#10;  var possible = &quot;ABCDEF&quot;;&amp;#10;&amp;#10;  for (var i = 0; i &lt; 1; i++)&amp;#10;    text += possible.charAt(Math.floor(Math.random() * possible.length));&amp;#10;&amp;#10;  return text;&amp;#10;}&amp;#10;&amp;#10;makeid=makeid2;&amp;#10;// find index of a string element in an array&amp;#10;function findIndices2(listVariable, elementToSearch) {&amp;#10;    var matchIndex, searchItIndex;&amp;#10;    matchIndex = [];&amp;#10;    searchItIndex = 0;&amp;#10;    for (var i, _pj_c = 0, _pj_a = listVariable, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        if ((i === elementToSearch)) {&amp;#10;            matchIndex.push(searchItIndex);&amp;#10;        }&amp;#10;        searchItIndex = (searchItIndex + 1);&amp;#10;    }&amp;#10;    return matchIndex;&amp;#10;}&amp;#10;findIndices = findIndices2;&amp;#10;&amp;#10;&amp;#10;// shuffle array: randomly shuffles the order of elements in an array.&amp;#10;function randomArrayShuffle2(o){&amp;#10;    for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);&amp;#10;    return o;&amp;#10;}&amp;#10;&amp;#10;randomArrayShuffle = randomArrayShuffle2;&amp;#10;&amp;#10;function randomIntFromInterval2(min, max) { // min and max included &amp;#10;  return Math.floor(Math.random() * (max - min + 1) + min)&amp;#10;}&amp;#10;randomIntFromInterval = randomIntFromInterval2;&amp;#10;&amp;#10;&amp;#10;function range2(start, end) {&amp;#10;    if(start === end) return [start];&amp;#10;    return [start, ...range(start + 1, end)];&amp;#10;}&amp;#10;range = range2;&amp;#10;// Latin Square design generator&amp;#10;&amp;#10;// How to use:&amp;#10;// var conditions = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;];&amp;#10;// balancedLatinSquare(conditions, 0)  //=&gt; [&quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;C&quot;]&amp;#10;// balancedLatinSquare(conditions, 1)  //=&gt; [&quot;B&quot;, &quot;C&quot;, &quot;A&quot;, &quot;D&quot;]&amp;#10;// balancedLatinSquare(conditions, 2)  //=&gt; [&quot;C&quot;, &quot;D&quot;, &quot;B&quot;, &quot;A&quot;]&amp;#10;// ...&amp;#10;function balancedLatinSquare2(array, participantId) {&amp;#10; var result = [];&amp;#10; // Based on &quot;Bradley, J. V. Complete counterbalancing of immediate sequential effects in a Latin square design. J. Amer. Statist. Ass.,.1958, 53, 525-528. &quot;&amp;#10; for (var i = 0, j = 0, h = 0; i &lt; array.length; ++i) {&amp;#10;  var val = 0;&amp;#10;  if (i &lt; 2 || i % 2 != 0) {&amp;#10;   val = j++;&amp;#10;  } else {&amp;#10;   val = array.length - h - 1;&amp;#10;   ++h;&amp;#10;  }&amp;#10;&amp;#10;  var idx = (val + participantId) % array.length;&amp;#10;  result.push(array[idx]);&amp;#10; }&amp;#10;&amp;#10; if (array.length % 2 != 0 &amp;&amp; participantId % 2 != 0) {&amp;#10;  result = result.reverse();&amp;#10; }&amp;#10;&amp;#10; return result;&amp;#10;}&amp;#10;&amp;#10;balancedLatinSquare = balancedLatinSquare2;&amp;#10;&amp;#10;&amp;#10;&amp;#10;/////////////////////////////////////&amp;#10;//// font normalization function ////&amp;#10;/////////////////////////////////////&amp;#10;&amp;#10;Array.prototype.sum = function() {&amp;#10;    return this.reduce(function(a,b){return a+b;});&amp;#10;};&amp;#10;&amp;#10;Array.prototype.mean = function() {&amp;#10;    return this.sum() / this.length;&amp;#10;};&amp;#10;&amp;#10;// CONTROL vars (Times)&amp;#10;unitsPerEm_ctrl = 1000;&amp;#10;xHeight_ctrl = 448;&amp;#10;width_ctrl = 556.388855;&amp;#10;height_ctrl = 707.977295;&amp;#10;size_ctrl = 16;&amp;#10;yourX=0&amp;#10;xHeight_ctrl_weight = 448/unitsPerEm_ctrl;&amp;#10;width_ctrl_weight   = 556.388855/unitsPerEm_ctrl;&amp;#10;height_ctrl_weight  = 707.977295/unitsPerEm_ctrl;&amp;#10;&amp;#10;xHeightSourceDelta =  0.44970703125;&amp;#10;widthSourceDelta =  0.5528367565524194;&amp;#10;heightSourceDelta =  0.6362068422379032;&amp;#10;&amp;#10;chars = '1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM';&amp;#10;chars_check = chars.split('');&amp;#10;chars_decimal = [49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 113, 119, 101, 114, 116, 121, 117, 105, 111, 112, 97, 115, 100, 102, 103, 104, 106, 107, 108, 122, 120, 99, 118, 98, 110, 109, 81, 87, 69, 82, 84, 89, 85, 73, 79, 80, 65, 83, 68, 70, 71, 72, 74, 75, 76, 90, 88, 67, 86, 66, 78, 77];&amp;#10;&amp;#10;//chars = 'Adobe';&amp;#10;chars_check = chars.split('');&amp;#10;chars_decimal = [];&amp;#10;chars_check.forEach(e =&gt; {&amp;#10;    chars_decimal.push(e.codePointAt());&amp;#10;});&amp;#10;&amp;#10;&amp;#10;chars_unicode = ['0x0031','0x0032','0x0033','0x0034','0x0035','0x0036','0x0037','0x0038','0x0039','0x0030','0x0071','0x0077','0x0065','0x0072','0x0074','0x0079','0x0075','0x0069','0x006f','0x0070','0x0061','0x0073','0x0064','0x0066','0x0067','0x0068','0x006a','0x006b','0x006c','0x007a','0x0078','0x0063','0x0076','0x0062','0x006e','0x006d','0x0051','0x0057','0x0045','0x0052','0x0054','0x0059','0x0055','0x0049','0x004f','0x0050','0x0041','0x0053','0x0044','0x0046','0x0047','0x0048','0x004a','0x004b','0x004c','0x005a','0x0058','0x0043','0x0056','0x0042','0x004e','0x004d'];&amp;#10;&amp;#10;function log(str) {&amp;#10;    console.log(str);&amp;#10;};&amp;#10;&amp;#10;function print_server_load(name,path) {&amp;#10;    log(&quot;@font-face {&quot;);&amp;#10;    log(&quot;    font-family: '&quot; + name + &quot;';&quot;);&amp;#10;    log(&quot;    font-style: normal;&quot;);&amp;#10;    log(&quot;    font-weight: normal;&quot;);&amp;#10;    log(&quot;    src: local('&quot; + name + &quot;'), url('fonts/&quot; + path + &quot;') format('truetype');&quot;);&amp;#10;    log(&quot;}&quot;);&amp;#10;};&amp;#10;&amp;#10;function print_css(name,name_css,factor,size) {&amp;#10;    log(&quot;p.&quot; + name_css + &quot;_&quot; + factor + &quot; {&quot;);&amp;#10;    log(&quot;    font-family: '&quot; + name + &quot;' !important;&quot;);&amp;#10;    log(&quot;    font-size: &quot; + size + &quot;px;&quot;);&amp;#10;    log(&quot;}&quot;);&amp;#10;}&amp;#10;&amp;#10;function gen_normalization2(fontPath,name,name_css) {&amp;#10;    opentype.load(fontPath, function(err, font) {&amp;#10;        if (err) {&amp;#10;            alert('Font ' + fontPath + ' could not be loaded: ' + err);&amp;#10;        } else {&amp;#10;            // Now let's display it on a canvas with id &quot;canvas&quot;&amp;#10;            console.log('normalization')&amp;#10;            //console.log(document.getElementById('canvas'))&amp;#10;            //console.log(document.getElementById('canvas').getContext)&amp;#10;            //console.log(document.getElementById('canvas').getContext('2d'))&amp;#10;            //var ctx = document.getElementById('canvas').getContext('2d');&amp;#10;    &amp;#10;            // Construct a Path object containing the letter shapes of the given text.&amp;#10;            // The other parameters are x, y and fontSize. Note that y is the position of the baseline.&amp;#10;            var path = font.getPath(chars, 0, 0, 16);&amp;#10;    &amp;#10;            //&amp;#10;            var xHeight = font.tables.os2.sxHeight; // sxHeight could be missing from some fonts&amp;#10;            var widths = [];&amp;#10;            var heights = [];&amp;#10;    &amp;#10;           var xMinFont = 0;&amp;#10;           var xMaxFont = 0;&amp;#10;           var yMinFont = 0;&amp;#10;           var yMaxFont = 0;&amp;#10;    &amp;#10;            //compute max width/height&amp;#10;            Object.keys(font.glyphs.glyphs).forEach(function (k) {&amp;#10;                var glyph = font.glyphs.glyphs[k];&amp;#10;                var unicode_decimal = glyph.unicode;&amp;#10;                if (chars_decimal.includes(unicode_decimal)) {&amp;#10;                    if(glyph.xMin &lt; xMinFont)&amp;#10;                        xMinFont = glyph.xMin;&amp;#10;                    if(glyph.xMax &gt; xMaxFont)&amp;#10;                        xMaxFont = glyph.xMax;&amp;#10;                    if(glyph.yMin &lt; yMinFont)&amp;#10;                        yMinFont = glyph.yMin;&amp;#10;                    if(glyph.yMax &gt; yMaxFont)&amp;#10;                        yMaxFont = glyph.yMax;&amp;#10;                }&amp;#10;            });&amp;#10;    &amp;#10;            Object.keys(font.glyphs.glyphs).forEach(function (k) {&amp;#10;                var glyph = font.glyphs.glyphs[k];&amp;#10;                var char = glyph.name;&amp;#10;                var unicode_decimal = glyph.unicode;&amp;#10;    &amp;#10;                var lsb = glyph.leftSideBearing;&amp;#10;                var rsb = glyph.advanceWidth - (lsb + glyph.xMax - glyph.xMin); //right side bearing&amp;#10;    &amp;#10;                var width = glyph.xMax - glyph.xMin;&amp;#10;                width = glyph.advanceWidth;&amp;#10;                //width = glyph.xMax - glyph.xMin;&amp;#10;    &amp;#10;                var yMinGlyph = glyph.yMin;&amp;#10;                var yMaxGlyph = glyph.yMax;&amp;#10;                var yMinFinal = yMinFont;&amp;#10;                var yMaxFinal = yMaxFont;&amp;#10;    &amp;#10;                if (yMinFont &gt; yMinGlyph)&amp;#10;                    yMinFinal = yMinGlyph;&amp;#10;                if (yMaxFont &lt; yMaxGlyph)&amp;#10;                    yMaxFinal = yMaxGlyph;&amp;#10;                &amp;#10;                var height = glyph.yMax - glyph.yMin;&amp;#10;                if (chars_decimal.includes(unicode_decimal)) {&amp;#10;                    widths.push(width);&amp;#10;                    heights.push(height);&amp;#10;                }&amp;#10;                if(unicode_decimal === 120) { // x&amp;#10;                    xHeight = yMaxGlyph - yMinGlyph;&amp;#10;                }&amp;#10;            });&amp;#10;    &amp;#10;            let unitsPerEm = font.tables.head.unitsPerEm;&amp;#10;    &amp;#10;            let xHeightDelta = xHeight/unitsPerEm;&amp;#10;            let widthDelta = widths.mean()/unitsPerEm;&amp;#10;            let heightDelta = heights.mean()/unitsPerEm;&amp;#10;            &amp;#10;            let x = 16*(1+((xHeightSourceDelta-xHeightDelta)/xHeightDelta));&amp;#10;            let w = 16*(1+((widthSourceDelta-widthDelta)/widthDelta));&amp;#10;            let h = 16*(1+((heightSourceDelta-heightDelta)/heightDelta));&amp;#10;            &amp;#10;            yourX = (1+((xHeightSourceDelta-xHeightDelta)/xHeightDelta));&amp;#10;            console.log('yourX')&amp;#10;            console.log(yourX)&amp;#10;            return yourX&amp;#10;            &amp;#10;        }&amp;#10;    });    &amp;#10;&amp;#10;}&amp;#10;&amp;#10;gen_normalization = gen_normalization2;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="// shuffle array: randomly shuffles the order of elements in an array.&amp;#10;function randomArrayShuffle2(o){&amp;#10;    for(var j, x, i = o.length; i; j = parseInt(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);&amp;#10;    return o;&amp;#10;}&amp;#10;&amp;#10;randomArrayShuffle = randomArrayShuffle2;&amp;#10;&amp;#10;//" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="functionsOnly" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="variables">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="// redirect back to readabilitylab.xyz&amp;#10;psychoJS.setRedirectUrls('https://readabilitylab.xyz','');&amp;#10;&amp;#10;///////////////////////////////////////////////////////////////&amp;#10;//// BLOCK AND TRIAL RELATED PARAMETERS - COUNTERBALANCING ////&amp;#10;///////////////////////////////////////////////////////////////&amp;#10;&amp;#10;&amp;#10;//thisGroup = await psychoJS.shelf.counterBalanceSelect({key: ['pilot_child'], groups: ['A', 'B','C','D','E','F'], groupSizes: [2,2,2,2,2,2]})&amp;#10;thisGroup = {};&amp;#10;thisGroup.group = makeid();&amp;#10;//PID = randomIntFromInterval(0,5);&amp;#10;if (thisGroup.group === 'A'){&amp;#10;    PID = 0;&amp;#10;}&amp;#10;if (thisGroup.group === 'B') {&amp;#10;    PID = 1;&amp;#10;}&amp;#10;if (thisGroup.group === 'C') {&amp;#10;    PID = 2;&amp;#10;}&amp;#10;if (thisGroup.group === 'D') {&amp;#10;    PID = 3;&amp;#10;}&amp;#10;if (thisGroup.group === 'E') {&amp;#10;    PID = 4;&amp;#10;}&amp;#10;if (thisGroup.group === 'F') {&amp;#10;    PID = 5;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;participantCode = randomIntFromInterval(100000,999999);&amp;#10;expInfo[&quot;participant&quot;] = participantCode.toString() + thisGroup.group;&amp;#10;console.log(&quot;group&quot;,thisGroup.group)&amp;#10;console.log(&quot;PID&quot;,PID)&amp;#10;console.log('subject code',expInfo[&quot;participant&quot;]);&amp;#10;psychoJS.experiment.dataFileName = ((&quot;.&quot; + &quot;/&quot;) + `data/${expInfo[&quot;participant&quot;]}_${expName}_${expInfo[&quot;date&quot;]}`);&amp;#10;passageSetOrder = [];&amp;#10;&amp;#10;//////////////////////////////////////////////////////////////////////////&amp;#10;//// TEXT PARAMETERS (pixels, size multipliers, wrapwidth, position.) ////&amp;#10;//////////////////////////////////////////////////////////////////////////&amp;#10;// text sizes&amp;#10;baseSizePixels = 16;&amp;#10;questionSizeMultiplier = 1.2;&amp;#10;passageSizeMultiplier = 1.8;&amp;#10;instructionSizeMultiplier = 1.5;&amp;#10;passageTextSize = baseSizePixels * passageSizeMultiplier;&amp;#10;questionTextSize = baseSizePixels * questionSizeMultiplier; // used in questions etc.&amp;#10;instructionTextSize = baseSizePixels * instructionSizeMultiplier;&amp;#10;// window pixel sizes below (h horizontal, v vertical)&amp;#10;vsize = psychoJS.window.size[1];&amp;#10;hsize = psychoJS.window.size[0];&amp;#10;&amp;#10;// text wrapping and position parameters&amp;#10;wrapWidthText = hsize*4/5;&amp;#10;wrapWidthPassages = hsize/2;&amp;#10;// x axis starting point for passages&amp;#10;xAxisCenterPassages =  -hsize/4;&amp;#10;// x axis starting point for other text (instructions etc.)&amp;#10;xAxisCenter = -hsize * 2/5;&amp;#10;// screen scale instructions  &amp;#10;topScreenInstruction = vsize * 3/10;&amp;#10;bottomScreenInstruction = -vsize * 3/10;&amp;#10;// next button size and position&amp;#10;buttonWidth = hsize/10;&amp;#10;buttonHeight = vsize/10;&amp;#10;&amp;#10;buttonX = hsize * 4/10;&amp;#10;buttonY = 0-(vsize * 4/10);&amp;#10;&amp;#10;// final link positions&amp;#10;formLinkX = hsize * 3/10;&amp;#10;formLinkY = 0-(vsize * 3/10);&amp;#10;&amp;#10;websiteLinkX = 0-(hsize * 3/10);&amp;#10;websiteLinkY = 0-(vsize * 3/10);&amp;#10;// question text positions&amp;#10;questionsXaxis = -hsize*45/100;&amp;#10;questionsTopYaxis = vsize*10/100;&amp;#10;questionsBottomYaxis = -vsize*35/100;&amp;#10;// slider positions and size&amp;#10;sliderPosition = [-hsize*45/100, -vsize*10/100];&amp;#10;sliderSize = [hsize*1/100, vsize*20/100];&amp;#10;// textbox position and size&amp;#10;textboxSize = [hsize * 2/5, vsize*7.5/100];&amp;#10;textboxPosition = [xAxisCenter, 0];&amp;#10;console.log(&quot;hsize&quot;,hsize,&quot;vsize&quot;,vsize)&amp;#10;console.log(&quot;wrapwidthText&quot;,wrapWidthText,&quot;xAxis&quot;,xAxisCenter)&amp;#10;console.log(&quot;wrapwidthPass&quot;,wrapWidthPassages,&quot;xAxisPass&quot;,xAxisCenterPassages) &amp;#10;&amp;#10;&amp;#10;passageYaxis = -200;&amp;#10;// scaling parameters&amp;#10;y_scale = 1;&amp;#10;x_scale = 1;&amp;#10;&amp;#10;// clock&amp;#10;myClock = new util.Clock();&amp;#10;//////////////////////////////////////////////////////////////////////////&amp;#10;//// DATA REGISTRY VARIABLES (accuracy, rt, date, blocks, trials etc) ////&amp;#10;//////////////////////////////////////////////////////////////////////////&amp;#10;totalTrialIterationIndex = 0;&amp;#10;accuracyTotal = [0,0];&amp;#10;&amp;#10;data_totalTrialIndex= [];&amp;#10;data_dateTime       = [];&amp;#10;data_miniRating     = [];&amp;#10;data_trialType      = [];&amp;#10;data_itemID         = [];&amp;#10;data_itemType       = [];&amp;#10;data_passageRT      = [];&amp;#10;data_passageFont    = [];&amp;#10;data_compAccuracy   = [];&amp;#10;data_compChoice     = [];&amp;#10;data_blockName      = [];&amp;#10;data_zoomLevel      = [];&amp;#10;currentFontType     = [];&amp;#10;currentRT           = [];&amp;#10;browserZoom         = [];" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="variables" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="dataregistery">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="thisExp = psychoJS.experiment;&amp;#10;// write trial by trial data&amp;#10;trialColumNames = [&quot;trialNo&quot;,&quot;itemID&quot; ,&quot;blockName&quot;, &quot;trialType&quot;, &quot;FontName&quot;, &quot;wordsPerMinute&quot;, &quot;comprehensionAccuracy&quot;, &quot;comprehensionChoice&quot;,&quot;miniSurveyRating&quot;];&amp;#10;&amp;#10;// add headers right above the data &amp;#10;psychoJS.experiment.addData(&quot;dateTime&quot;, &quot;dateTime&quot;)&amp;#10;psychoJS.experiment.addData(trialColumNames[0], trialColumNames[0]);&amp;#10;psychoJS.experiment.addData(&quot;subid&quot;, &quot;subid&quot;)&amp;#10;psychoJS.experiment.addData(&quot;counterbalanceGroup&quot;, &quot;counterbalanceGroup&quot;)&amp;#10;psychoJS.experiment.addData(trialColumNames[1], trialColumNames[1]);&amp;#10;psychoJS.experiment.addData(trialColumNames[2], trialColumNames[2]);&amp;#10;psychoJS.experiment.addData(trialColumNames[3], trialColumNames[3]);&amp;#10;psychoJS.experiment.addData(trialColumNames[4], trialColumNames[4]);&amp;#10;psychoJS.experiment.addData(trialColumNames[5], trialColumNames[5]);&amp;#10;psychoJS.experiment.addData(trialColumNames[6], trialColumNames[6]);&amp;#10;psychoJS.experiment.addData(trialColumNames[7], trialColumNames[7]);&amp;#10;psychoJS.experiment.addData(trialColumNames[8], trialColumNames[8]);&amp;#10;psychoJS.experiment.addData(&quot;X_Scale&quot;, &quot;X_Scale&quot;);&amp;#10;psychoJS.experiment.addData(&quot;Y_Scale&quot;, &quot;Y_Scale&quot;);&amp;#10;psychoJS.experiment.addData(&quot;IsFullScreen&quot;, &quot;IsFullScreen&quot;)&amp;#10;psychoJS.experiment.addData(&quot;window_width&quot;, &quot;window_width&quot;)&amp;#10;psychoJS.experiment.addData(&quot;window_height&quot;, &quot;window_height&quot;)&amp;#10;psychoJS.experiment.addData(&quot;browser&quot;, &quot;browser&quot;)&amp;#10;psychoJS.experiment.addData(&quot;browserZoomLevel&quot;, &quot;browserZoomLevel&quot;)&amp;#10;psychoJS.experiment.nextEntry();" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="dataregistery" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="instructions_passage">
      <TextComponent name="readPassageInstructions">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="readPassageInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In the next section, please try to read the passage at your normal speed without reading aloud, re-reading, or taking breaks, and then press the button at the bottom of the screen when you finish. &amp;#10;&amp;#10;• Keep in mind you will answer questions after reading. &amp;#10;&amp;#10;• If you need to take a very short break please do so now.&amp;#10;&amp;#10;Once you are ready, please press the button below to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_4">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="readPassageInstructions.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_4" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_readingInstructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_readingInstructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseReadingInstructions">
        <Param val="nextButton_readingInstructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseReadingInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="setTrialParameters">
      <CodeComponent name="getTrialParameters">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// setup trial parameters&amp;#10;trialproperties = thisStimulus_list[&quot;trialproperties&quot;] // cell that indicates the number of passages and questions&amp;#10;trialproperties = trialproperties.split(&quot;;&quot;) &amp;#10;//passage counts&amp;#10;passageCount = trialproperties[0]&amp;#10;passageCount = Number(passageCount[passageCount.length-1]) // get the last element (count)&amp;#10;//question counts&amp;#10;questionCount = trialproperties[1]&amp;#10;questionCount = Number(questionCount[questionCount.length-1]) // get the last element (count)&amp;#10;//mini survey count&amp;#10;miniSurveyCount = trialproperties[2]&amp;#10;miniSurveyCount = Number(miniSurveyCount[miniSurveyCount.length-1]) // get the last element (count)&amp;#10;//randomization of passages within a set (1= yes, 0=no)&amp;#10;randomizePassages = trialproperties[3]&amp;#10;randomizePassages = Number(randomizePassages[randomizePassages.length-1]) // get the last element (count)&amp;#10;//randomization of questions within a set (1= yes, 0=no)&amp;#10;randomizeQuestions = trialproperties[4]&amp;#10;randomizeQuestions = Number(randomizeQuestions[randomizeQuestions.length-1]) // get the last element (count)&amp;#10;&amp;#10;// create passage index array&amp;#10;rand_po = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(0, passageCount), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    rand_po.push(_pj_c+1);&amp;#10;}&amp;#10;&amp;#10;// create question index array&amp;#10;rand_qo = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(0, questionCount), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    rand_qo.push(_pj_c+1);&amp;#10;}&amp;#10;&amp;#10;// create mini survey index array&amp;#10;rand_mo = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(0, miniSurveyCount), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    rand_mo.push(_pj_c+1);&amp;#10;}&amp;#10;&amp;#10;&amp;#10;//randomize passage and question orders&amp;#10;if (randomizePassages === 1) {&amp;#10;    rand_po = randomArrayShuffle(rand_po);&amp;#10;    &amp;#10;}&amp;#10;if (randomizeQuestions === 1) {&amp;#10;     rand_qo = randomArrayShuffle(rand_qo);&amp;#10;     rand_mo = randomArrayShuffle(rand_mo);&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;// what is this trial: practice or test?&amp;#10;trialType = thisStimulus_list['trialType'];&amp;#10;// increase trial iteration index for each iteration of stimulus list&amp;#10;trialIteration = trialIteration +1;&amp;#10;totalTrialIterationIndex = totalTrialIterationIndex+1;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="getTrialParameters" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="displayPassaages">
      <CodeComponent name="passageCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="currentTrialType = thisStimulus_list[&quot;trialType&quot;];&amp;#10;if (currentTrialType === &quot;test&quot;) {&amp;#10;        registerResponse = 1; &amp;#10;    } else {&amp;#10;            registerResponse = 0;&amp;#10;        }&amp;#10;// call font to be displayed in this trial&amp;#10;currentFont             = blockFontsForDisplay[trialIteration];  &amp;#10;currentFontSize         = normalized_xsizes[currentFont];&amp;#10;currentFontSize         = currentFontSize * y_scale;&amp;#10;currentHeightDifference = heightDifferences[currentFont];&amp;#10;console.log('currentSize', currentFontSize);&amp;#10;console.log('currentFont', currentFont)&amp;#10;// create the excel column name that represents the current passage text&amp;#10;passageIdentifier = ('pas'+((rand_po[passage_trials.thisN]).toString())+'text')&amp;#10;itemIDIdentifier = ('pas'+((rand_po[passage_trials.thisN]).toString())+'ID')&amp;#10;// call the passage text &amp;#10;currentPassage = thisStimulus_list[passageIdentifier];&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID = thisStimulus_list[itemIDIdentifier];&amp;#10;&amp;#10;// count how many words there are in this passage&amp;#10;wordCount = currentPassage;&amp;#10;wordCount = wordCount.replace(/'+/g, ''); // remove apostrophes&amp;#10;wordCount = wordCount.replace(/-+/g, ' '); // turn dashes into sapce&amp;#10;wordCount = wordCount.replace(/\s+/g, ' '); // turn more than one space into one space&amp;#10;wordCount = wordCount.replace(/[\W_]+/g,&quot; &quot;); // turn all non alphanumericals into space&amp;#10;wordCount = wordCount.split(&quot; &quot;); // split the text by spaces&amp;#10;splitWord = wordCount;&amp;#10;wordCount = wordCount.length -1 // count how many words there are (-1 because .split creates a [&quot;&quot;] element in the array. We remove that by -1. &amp;#10;&amp;#10;passageWord = splitWord.slice(0,2); // get first three words of the passage to identify it within developer mode&amp;#10;&amp;#10;&amp;#10;&amp;#10;console.log('first word and word count of passages',passageWord,wordCount)&amp;#10;console.log('passage words separated',splitWord)&amp;#10;// start Timer for 2 second delay during passages&amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();&amp;#10;&amp;#10;// center left &amp;#10;passageText.setAlignHoriz(&quot;left&quot;);&amp;#10;console.log('currentSize', currentFontSize/y_scale);&amp;#10;console.log('yscale', y_scale);&amp;#10;console.log('scaledsize', currentFontSize);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="passageCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="passageText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="$currentFont" valType="str" updates="set every repeat" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="currentFontSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="passageText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenterPassages, currentHeightDifference)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.3" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentPassage" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthPassages" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="passageKeyPress">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="passageKeyPress" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.3" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <TextComponent name="wght200">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="RobotoFlex_wght200" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="currentFontSize" valType="num" updates="constant" name="letterHeight"/>
        <Param val="wght200" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-400, 200)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="weight200" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="wght400">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="RobotoFlex_wght400" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="currentFontSize" valType="num" updates="constant" name="letterHeight"/>
        <Param val="wght400" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-300, 200)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="weight400" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="wght600">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="RobotoFlex_wght600" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="currentFontSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="wght600" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(-200, 200)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="weight600" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="passageRegistery">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless 2 seconds have elapsed since&amp;#10;// the passage display&amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;updateFont = 1;&amp;#10;startTime = myClock.getTime();" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="// trying to debug the error of fullscreen-miniscreen &amp;#10;// display problem with fonts. First display does not show &amp;#10;// the font used if you don't exit fullscreen and come back&amp;#10;if (updateFont === 1) {&amp;#10;    passageText.setText(currentPassage);&amp;#10;    passageText.setFont(currentFont);&amp;#10;    passageText.setHeight(currentFontSize);&amp;#10;}&amp;#10;&amp;#10;currentTime = myClock.getTime();&amp;#10;&amp;#10;////////////////////////////////////////////////////////&amp;#10;//// MOUSE-CLICK VERSION OF TWO SECOND DELAY SCRIPT ////&amp;#10;////////////////////////////////////////////////////////&amp;#10;/*&amp;#10;// &amp;&amp; (mousePassage.time.length &gt;= 1)&amp;#10;if ((currentTime - startTime &gt; 1 ) ){ &amp;#10;    startTime = myClock.getTime();&amp;#10;    &amp;#10;&amp;#10;    console.log('wholemouse',mousePassage)&amp;#10;    mouselength= mousePassage.time.length&amp;#10;    mouse_tStart = mousePassage.tStart; // get the mouse component's starting second&amp;#10;    button_tStart = nextButton_passage.tStart // get 'next button's starting second&amp;#10;    validClick = mousePassage.time[mouselength-1]; // get the latest mouse click-- which terminates the loop&amp;#10;    if (validClick &gt;=0){&amp;#10;        validClickTime = validClick + mouse_tStart + button_tStart; // add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;        console.log('mouse time',validClick)&amp;#10;        console.log('mouse rt', validClickTime)&amp;#10;        continueRoutine = false&amp;#10;    }&amp;#10;}&amp;#10;*/&amp;#10;&amp;#10;&amp;#10;/////////////////////////////////////////////////////&amp;#10;//// KEYBOARD VERSION OF TWO SECOND DELAY SCRIPT ////&amp;#10;/////////////////////////////////////////////////////&amp;#10;/*&amp;#10;twoSecondElapsed = currentTime-startTime &gt;=.2;&amp;#10;if (twoSecondElapsed===true) {&amp;#10;    if (clearEventAfterChoice === 1){&amp;#10;        psychoJS.eventManager.clearEvents(); // clears keypress events after choice so that previous unrelated space &amp;#10;        clearEventAfterChoice=0;             // does not terminate the loop prematurely        &amp;#10;        }&amp;#10;    &amp;#10;    var _pj;&amp;#10;    function _pj_snippets(container) {&amp;#10;        function in_es6(left, right) {&amp;#10;            if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;                return (right.indexOf(left) &gt; (- 1));&amp;#10;            } else {&amp;#10;                if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                    return right.has(left);&amp;#10;                } else {&amp;#10;                    return (left in right);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        container[&quot;in_es6&quot;] = in_es6;&amp;#10;        return container;&amp;#10;    }&amp;#10;&amp;#10;    _pj = {};&amp;#10;    _pj_snippets(_pj);&amp;#10;    keys = psychoJS.eventManager.getKeys();&amp;#10;    &amp;#10;        if (keys.length) {&amp;#10;            if (_pj.in_es6(&quot;space&quot;, keys)) {         &amp;#10;                continueRoutine = false;            &amp;#10;            }&amp;#10;        }&amp;#10; }&amp;#10;*/" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (registerResponse === 1) {&amp;#10;    &amp;#10;    &amp;#10;    // get reaction time from psychopy's keyboard component&amp;#10;    //passageReactionTime = passageKeyPress.rt;&amp;#10;    &amp;#10;    // get reaction time from psychopy's mouse component &amp;#10;    mouselength= mousePassage.time.length&amp;#10;    mouse_tStart = mousePassage.tStart; // get the mouse component's starting second&amp;#10;    button_tStart = passageText.tStart // get 'next button's starting second&amp;#10;    validClick = mousePassage.time[mouselength-1]; // get the latest mouse click-- which terminates the loop    &amp;#10;    validClickTime = validClick + mouse_tStart - button_tStart; // add mouse's and button's starting seconds to the click RT, because it starts to count RT after these are displayed&amp;#10;    console.log('mouse time',validClick)&amp;#10;    console.log('mouse rt', validClickTime)    &amp;#10;    passageReactionTime = validClickTime;&amp;#10;    // calculate words per minute&amp;#10;    wpm = (wordCount*(60/passageReactionTime));&amp;#10;    // get browser zoom&amp;#10;    browserZoom = window.outerWidth*100 / window.innerWidth;&amp;#10;    // register data&amp;#10;    data_zoomLevel.push(browserZoom);&amp;#10;    data_miniRating.push([]); // empty because there is no rating but only accuracy for comprehension questions&amp;#10;    data_compChoice.push([]); // empty because there is no choice during passages&amp;#10;    data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;    data_itemType.push(&quot;passage&quot;);  // item type (what appeared on the screen)&amp;#10;    data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;    data_blockName.push(blockName); // what is the name of this block &amp;#10;    data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;    data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;    data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;    data_dateTime.push(util.MonotonicClock.getDateStr()); // date and time &amp;#10;    data_passageRT.push(wpm); // words per minute&amp;#10;&amp;#10;    &amp;#10;    wpmDictionary = getFastestFont[currentFont];&amp;#10;    currentDictionaryWpm = wpmDictionary[0] + wpm;&amp;#10;    currentDictionaryDivisor = wpmDictionary[1] + 1;&amp;#10;    getFastestFont[currentFont] = [currentDictionaryWpm, currentDictionaryDivisor];&amp;#10;    console.log('dictionary itself', getFastestFont);&amp;#10;    console.log('dictionary wpm', getFastestFont[currentFont]);&amp;#10;    &amp;#10;}" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="passageRegistery" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_passage">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_passage" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".45" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mousePassage">
        <Param val="nextButton_passage" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mousePassage" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="displayQuestions">
      <CodeComponent name="initiateQuestion">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="currentTrialType = thisStimulus_list[&quot;trialType&quot;];&amp;#10;if (currentTrialType === &quot;test&quot;) {&amp;#10;        registerResponse = 1; &amp;#10;    } else {&amp;#10;            registerResponse = 0;&amp;#10;        }&amp;#10;&amp;#10;// create the excel column name that represents the current question text&amp;#10;questionIdentifier  = ('ques'+((rand_qo[question_trials.thisN]).toString())+'text')&amp;#10;labelIdentifier     = ('ques'+((rand_qo[question_trials.thisN]).toString())+'label')&amp;#10;itemIDIdentifier = ('ques'+((rand_po[passage_trials.thisN]).toString())+'ID')&amp;#10;// call the question text &amp;#10;currentQuestion     = thisStimulus_list[questionIdentifier];&amp;#10;currentlabel        = thisStimulus_list[labelIdentifier];&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID = thisStimulus_list[itemIDIdentifier];&amp;#10;// change additional question text's centering and style&amp;#10;questionText.setAlignHoriz('left')&amp;#10;questionText.bold = true;&amp;#10;pressSpaceText.setAlignHoriz('left')&amp;#10;pressSpaceText.bold = true;&amp;#10;clickOnCircleText.setAlignHoriz('left')&amp;#10;clickOnCircleText.bold = true;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initiateQuestion" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="questionText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentQuestion" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressSpaceText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressSpaceText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="The &lt;next page&gt; button will appear below after your choice. Please press the button below to continue after your choice." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="clickOnCircleText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale*1.15" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="clickOnCircleText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsTopYaxis*2)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Click on the black circle to the left of the correct answer." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <SliderComponent name="questionSlider">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="True" valType="bool" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionSlider" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="sliderPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="sliderSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="radio" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <CodeComponent name="updateAndRegister">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="////////////////////////////////////////////////&amp;#10;//// UPDATE SLIDER LABELS, SIZE, COLOR ETC. ////&amp;#10;////////////////////////////////////////////////&amp;#10;&amp;#10;// get slider labels from the excel file&amp;#10;sliderLabels = thisStimulus_list[labelIdentifier];&amp;#10;sliderLabels = sliderLabels.split(&quot;;&quot;);&amp;#10;labelCount = (sliderLabels.length);&amp;#10;// create tick marks so that data registry makes sense in terms of scores of each &amp;#10;// label: start from 1 not 0.&amp;#10;tickMarks = range(1,labelCount);&amp;#10;&amp;#10;// get the correct answer which always should be the last label&amp;#10;correctAnswer = sliderLabels[labelCount-1]; // -1 because index starts with 0&amp;#10;// shuffle slider labels after you get the correct answer&amp;#10;shuffledLabels = randomArrayShuffle(sliderLabels)&amp;#10;// display shuffled labels as tick marks &amp;#10;questionSlider.setLabels(shuffledLabels);&amp;#10;// change ticks of the slider&amp;#10;questionSlider.setTicks(tickMarks);    &amp;#10;// change font of the slider text&amp;#10;questionSlider.setFontSize(questionTextSize*y_scale);&amp;#10;// adjust slider's position and size&amp;#10;questionSlider._pos = sliderPosition;&amp;#10;questionSlider._size = sliderSize;&amp;#10;&amp;#10;// change slider's color and marker properties&amp;#10;questionSlider._lineColor = &quot;black&quot;;&amp;#10;questionSlider._tickColor = &quot;white&quot;;&amp;#10;questionSlider._markerColor = &quot;white&quot;;&amp;#10;questionSlider._tickSize= 15;&amp;#10;questionSlider._markerSize_px = 7;&amp;#10;&amp;#10;//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless participant chose one of &amp;#10;// the labels. &amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;&amp;#10;// align texts&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if thisIteration['itemType'] != None:&amp;#10;    sliderLabelsInPy = thisIteration['sliderLabels']; # for some reason it does not accept labels from excel, so I assign another variable for it&amp;#10;    sliderLabelsInPy = sliderLabelsInPy.split(&quot;;&quot;)&amp;#10;    #print(sliderLabelsInPy)&amp;#10;&amp;#10;    labelCount = len(sliderLabelsInPy)&amp;#10;    tickMarks = list(range(labelCount))&amp;#10;    tickMarks = [x+1 for x in tickMarks]&amp;#10;&amp;#10;        &amp;#10;    # create new slider with updated labels&amp;#10;    comp_question = visual.Slider(win=win, name='comp_question',&amp;#10;        startValue=None, size=(.01, .2), pos=(-.75, -.1), units=None,&amp;#10;        labels=sliderLabelsInPy, ticks=tickMarks, granularity=1.0,&amp;#10;        style='radio', styleTweaks=(), opacity=None,&amp;#10;        color='Black', fillColor='White', borderColor='Black', colorSpace='rgb',&amp;#10;        font='Arial', labelHeight=normFontSize,&amp;#10;        flip=True,labelWrapWidth = generalWrapWidth, depth=-3, readOnly=False)&amp;#10;    question_text.setAlignHoriz('left')&amp;#10;    #for label in comp_question.labelObjs:&amp;#10;           # label.height = generalFontSize  # Or whatever size you want    &amp;#10;            #label.wrapWidth = 5" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="compChoice = questionSlider.getRating();&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (registerResponse === 1) {&amp;#10;    // get the selected option among the labels&amp;#10;    compChoiceText = shuffledLabels[compChoice-1]; // -1 because label index starts with 0, tick mark starts with 1. &amp;#10;    // check if selected answer matches the correct answer&amp;#10;    if (correctAnswer === compChoiceText) {&amp;#10;            compAccuracy = 1;&amp;#10;            console.log(&quot;CORRECT ANSWER TO COMP&quot;)&amp;#10;            &amp;#10;        } else {&amp;#10;            compAccuracy = 0;&amp;#10;            console.log(&quot;WRONG ANSWER TO COMP&quot;)&amp;#10;        }&amp;#10;    accuracyTotal[0] = accuracyTotal[0] + compAccuracy&amp;#10;    accuracyTotal[1] = accuracyTotal[1] + 1 &amp;#10;    // get browser zoom&amp;#10;    browserZoom = window.outerWidth*100 / window.innerWidth;&amp;#10;    // register data&amp;#10;    data_zoomLevel.push(browserZoom);&amp;#10;    data_miniRating.push([]); // empty because there is no rating but only accuracy for comprehension questionsdata_compChoice.push(compChoiceText); // empty because there is no choice during passages&amp;#10;    data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;    data_itemType.push(&quot;comperehension&quot;);  // item type (what appeared on the screen)&amp;#10;    data_compAccuracy.push(compAccuracy); // empty because there is no accuracy during passages &amp;#10;    data_blockName.push(blockName); // what is the name of this block &amp;#10;    data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;    data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;    data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;    data_dateTime.push(util.MonotonicClock.getDateStr()); // date and time &amp;#10;    data_passageRT.push([]); // words per minute&amp;#10;    data_compChoice.push(compChoiceText) // chosen option is registered as text&amp;#10;}&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="updateAndRegister" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_comprehension">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_comprehension" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="questionSlider.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseComprehension">
        <Param val="nextButton_comprehension" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseComprehension" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="questionSlider.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="screenScale">
      <CodeComponent name="scaleCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="oldt=0&amp;#10;x_size=8.560&amp;#10;y_size=5.398&amp;#10;screen_height=0&amp;#10;print('below screen size') &amp;#10;print(win.size)&amp;#10;print(win.size[0])&amp;#10;print(win.size[1])&amp;#10;print(win.size[0]/win.size[1])&amp;#10;print(win.size[1]/win.size[0])&amp;#10;if win.units=='norm':&amp;#10;    x_scale=.05&amp;#10;    y_scale=.1&amp;#10;    dbase = .0001&amp;#10;    unittext=' norm units'&amp;#10;    vsize=2&amp;#10;elif win.units=='pix':&amp;#10;    x_scale=60&amp;#10;    y_scale=40&amp;#10;    dbase = .1&amp;#10;    unittext=' pixels'&amp;#10;    vsize=win.size[1]&amp;#10;else:&amp;#10;    x_scale=.05&amp;#10;    y_scale=.05&amp;#10;    dbase = .0001&amp;#10;    unittext=' height units'&amp;#10;    vsize=1&amp;#10;    &amp;#10;print(x_size*x_scale, y_size*y_scale)    " valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="oldt = 0;&amp;#10;x_size = 8.56;&amp;#10;y_size = 5.398;&amp;#10;x_size_pix = 640;&amp;#10;y_size_pix = 401;&amp;#10;screen_height = 0;&amp;#10;win=psychoJS.window;&amp;#10;console.log('below screen size')&amp;#10;console.log(&quot;whole window&quot;,win)&amp;#10;console.log(&quot;sizes&quot;,win.size[0],win.size[1])&amp;#10;hsize = 0;&amp;#10;vsize = 0;&amp;#10;if ((psychoJS.window.units === &quot;norm&quot;)) {&amp;#10;    x_scale = 0.05;&amp;#10;    y_scale = 0.1;&amp;#10;    dbase = 0.0001;&amp;#10;    unittext = &quot; norm units&quot;;&amp;#10;    vsize = 2;&amp;#10;} else {&amp;#10;    if ((psychoJS.window.units === &quot;pix&quot;)) {&amp;#10;        x_scale = 60;&amp;#10;        y_scale = 40;&amp;#10;        dbase = 0.1;&amp;#10;        unittext = &quot; pixels&quot;;&amp;#10;    } else {&amp;#10;        x_scale = 0.05;&amp;#10;        y_scale = 0.05;&amp;#10;        dbase = 0.0001;&amp;#10;        unittext = &quot; height units&quot;;&amp;#10;        vsize = 1;&amp;#10;    }&amp;#10;}&amp;#10;console.log((x_size * x_scale), (y_size * y_scale));&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="psychoJS.eventManager.clearEvents();&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="event.clearEvents()&amp;#10;textTop.setAlignHoriz('left')&amp;#10;text_bottom.setAlignHoriz('left')&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="keys=event.getKeys()&amp;#10;    &amp;#10;if len(keys):&amp;#10;    if t-oldt&lt;.5:&amp;#10;        dscale=5*dbase&amp;#10;        oldt=t&amp;#10;    else:&amp;#10;        dscale=dbase&amp;#10;        oldt=t&amp;#10;    if 'space' in keys and t &gt; 1:&amp;#10;        continueRoutine=False&amp;#10;    elif 'up' in keys:&amp;#10;        y_scale=round((y_scale+dscale)*10000)/10000&amp;#10;    elif 'down' in keys:&amp;#10;        y_scale=round((y_scale-dscale)*10000)/10000&amp;#10;    elif 'left' in keys:&amp;#10;        x_scale=round((x_scale-dscale)*10000)/10000&amp;#10;    elif 'right' in keys:&amp;#10;        x_scale=round((x_scale+dscale)*10000)/10000&amp;#10;    screen_height=round(vsize*10/y_scale)/10&amp;#10;    text_bottom.text='X Scale = '+str(x_scale)+unittext+' per cm, Y Scale = '+str(y_scale)+unittext+' per cm\nScreen height = '+str(screen_height)+' cm\n\nPress the space bar when done'&amp;#10;    ccimage.size=[x_size*x_scale, y_size*y_scale]&amp;#10;    print(x_size*x_scale, y_size*y_scale)" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (-1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = psychoJS.eventManager.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (((t - oldt) &lt; 0.5)) {&amp;#10;        dscale = (5 * dbase);&amp;#10;        oldt = t;&amp;#10;    } else {&amp;#10;        dscale = dbase;&amp;#10;        oldt = t;&amp;#10;    }&amp;#10;    if ((_pj.in_es6(&quot;space&quot;, keys) &amp;&amp; (t &gt; 1))) {&amp;#10;        continueRoutine = false;&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;up&quot;, keys)) {&amp;#10;            y_scale = (Math.round(((y_scale + dscale) * 10000)) / 10000);&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;down&quot;, keys)) {&amp;#10;                y_scale = (Math.round(((y_scale - dscale) * 10000)) / 10000);&amp;#10;            } else {&amp;#10;                if (_pj.in_es6(&quot;left&quot;, keys)) {&amp;#10;                    x_scale = (Math.round(((x_scale - dscale) * 10000)) / 10000);&amp;#10;                } else {&amp;#10;                    if (_pj.in_es6(&quot;right&quot;, keys)) {&amp;#10;                        x_scale = (Math.round(((x_scale + dscale) * 10000)) / 10000);&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    screen_height = (Math.round(((vsize * 10) / y_scale)) / 10);&amp;#10;    textBottom.text = ((((((((&quot;X Scale = &quot; + x_scale.toString()) + unittext) + &quot; per cm, Y Scale = &quot;) + y_scale.toString()) + unittext) + &quot; per cm\nScreen height = &quot;) + screen_height.toString()) + &quot; cm\n\nPress the space bar when done&quot;);&amp;#10;    ccimage.size = [(x_size * x_scale), (y_size * y_scale)];&amp;#10;    console.log((x_size * x_scale), (y_size * y_scale));&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="psychoJS.experiment.addData(&quot;X Scale&quot;, x_scale);&amp;#10;psychoJS.experiment.addData(&quot;Y Scale&quot;, y_scale);&amp;#10;console.log('y scale')&amp;#10;y_scale= y_scale/40;&amp;#10;x_scale = x_scale / 60;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="thisExp.addData('X Scale',x_scale)&amp;#10;thisExp.addData('Y Scale',y_scale)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="scaleCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="textTop">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="20" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="textTop" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, topScreenInstruction)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Resize this image to match the size of a credit card&amp;#10;Up arrow for taller&amp;#10;Down arrow for shorter&amp;#10;Left arrow for narrower&amp;#10;Right arrow for wider" valType="str" updates="constant" name="text"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="textBottom">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="20" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="textBottom" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0,bottomScreenInstruction)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Please press the button below to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <ImageComponent name="ccimage">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="bank-1300155_640.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="ccimage" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(x_size*x_scale, y_size*y_scale)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="nextButton_scale">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_scale" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseScale">
        <Param val="nextButton_scale" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseScale" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="instructions_minisurvey"/>
    <Routine name="displayMiniSurvey">
      <CodeComponent name="initiateSurvey">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="currentTrialType = thisStimulus_list[&quot;trialType&quot;];&amp;#10;if (currentTrialType === &quot;test&quot;) {&amp;#10;        registerResponse = 1; &amp;#10;    } else {&amp;#10;            registerResponse = 0;&amp;#10;        }&amp;#10;&amp;#10;// create the excel column name that represents the current question text&amp;#10;miniSurveyIdentifier  = ('mini'+((rand_mo[minisurvey_trials.thisN]).toString())+'text')&amp;#10;labelIdentifier     = ('mini'+((rand_mo[minisurvey_trials.thisN]).toString())+'label')&amp;#10;itemIDIdentifier = ('mini'+((rand_mo[passage_trials.thisN]).toString())+'ID')&amp;#10;// call the question text &amp;#10;currentMiniQuestion = thisStimulus_list[miniSurveyIdentifier];&amp;#10;currentMiniLabel    = thisStimulus_list[labelIdentifier];&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID = thisStimulus_list[itemIDIdentifier];&amp;#10;// change additional question text's centering and style&amp;#10;miniSurveyText.setAlignHoriz('left')&amp;#10;miniSurveyText.bold = true;&amp;#10;pressMiniSpaceText.setAlignHoriz('left')&amp;#10;pressMiniSpaceText.bold = true;&amp;#10;clickOnCircleText_2.setAlignHoriz('left')&amp;#10;clickOnCircleText_2.bold = true;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initiateSurvey" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="miniSurveyText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="miniSurveyText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentMiniQuestion" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressMiniSpaceText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressMiniSpaceText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="The &lt;next page&gt; button will appear below after your choice. Please press the button below to continue after your choice." valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="clickOnCircleText_2">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale*1.15" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="clickOnCircleText_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsTopYaxis*2)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Click on the black circle to the left of the correct answer." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <SliderComponent name="miniSurveySlider">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="True" valType="bool" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="miniSurveySlider" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="sliderPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="sliderSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="radio" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3, 4, 5)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <CodeComponent name="updateAndRegisterMini">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="////////////////////////////////////////////////&amp;#10;//// UPDATE SLIDER LABELS, SIZE, COLOR ETC. ////&amp;#10;////////////////////////////////////////////////&amp;#10;&amp;#10;// get slider labels from the excel file&amp;#10;sliderLabels = thisStimulus_list[labelIdentifier];&amp;#10;sliderLabels = sliderLabels.split(&quot;;&quot;);&amp;#10;labelCount = (sliderLabels.length);&amp;#10;// create tick marks so that data registry makes sense in terms of scores of each &amp;#10;// label: start from 1 not 0.&amp;#10;tickMarks = range(1,labelCount);&amp;#10;&amp;#10;// display shuffled labels as tick marks &amp;#10;miniSurveySlider.setLabels(sliderLabels);&amp;#10;// change ticks of the slider&amp;#10;miniSurveySlider.setTicks(tickMarks);    &amp;#10;// change font of the slider text&amp;#10;miniSurveySlider.setFontSize(questionTextSize*y_scale);&amp;#10;// adjust slider's position and size&amp;#10;miniSurveySlider._pos = sliderPosition;&amp;#10;miniSurveySlider._size = sliderSize;&amp;#10;// change slider's color and marker properties&amp;#10;miniSurveySlider._lineColor = &quot;black&quot;;&amp;#10;miniSurveySlider._tickColor = &quot;white&quot;;&amp;#10;miniSurveySlider._markerColor = &quot;white&quot;;&amp;#10;miniSurveySlider._tickSize= 60;&amp;#10;miniSurveySlider._markerSize_px = 40;&amp;#10;&amp;#10;//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless participant chose one of &amp;#10;// the labels. &amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if thisIteration['itemType'] != None:&amp;#10;    sliderLabelsInPy = thisIteration['sliderLabels']; # for some reason it does not accept labels from excel, so I assign another variable for it&amp;#10;    sliderLabelsInPy = sliderLabelsInPy.split(&quot;;&quot;)&amp;#10;    #print(sliderLabelsInPy)&amp;#10;&amp;#10;    labelCount = len(sliderLabelsInPy)&amp;#10;    tickMarks = list(range(labelCount))&amp;#10;    tickMarks = [x+1 for x in tickMarks]&amp;#10;&amp;#10;        &amp;#10;    # create new slider with updated labels&amp;#10;    comp_question = visual.Slider(win=win, name='comp_question',&amp;#10;        startValue=None, size=(.01, .2), pos=(-.75, -.1), units=None,&amp;#10;        labels=sliderLabelsInPy, ticks=tickMarks, granularity=1.0,&amp;#10;        style='radio', styleTweaks=(), opacity=None,&amp;#10;        color='Black', fillColor='White', borderColor='Black', colorSpace='rgb',&amp;#10;        font='Arial', labelHeight=normFontSize,&amp;#10;        flip=True,labelWrapWidth = generalWrapWidth, depth=-3, readOnly=False)&amp;#10;    question_text.setAlignHoriz('left')&amp;#10;    #for label in comp_question.labelObjs:&amp;#10;           # label.height = generalFontSize  # Or whatever size you want    &amp;#10;            #label.wrapWidth = 5" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="compChoice = miniSurveySlider.getRating();&amp;#10;/*&amp;#10;if (compChoice &gt;= 1 &amp;&amp; compChoice &lt;= labelCount) {&amp;#10;    if (clearEventAfterChoice === 1){&amp;#10;        psychoJS.eventManager.clearEvents(); // clears keypress events after choice so that previous unrelated space &amp;#10;        clearEventAfterChoice=0;             // does not terminate the loop prematurely        &amp;#10;        }&amp;#10;    &amp;#10;    var _pj;&amp;#10;    function _pj_snippets(container) {&amp;#10;        function in_es6(left, right) {&amp;#10;            if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;                return (right.indexOf(left) &gt; (- 1));&amp;#10;            } else {&amp;#10;                if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                    return right.has(left);&amp;#10;                } else {&amp;#10;                    return (left in right);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        container[&quot;in_es6&quot;] = in_es6;&amp;#10;        return container;&amp;#10;    }&amp;#10;&amp;#10;    _pj = {};&amp;#10;    _pj_snippets(_pj);&amp;#10;    keys = psychoJS.eventManager.getKeys();&amp;#10;    &amp;#10;        if (keys.length) {&amp;#10;            if (_pj.in_es6(&quot;space&quot;, keys)) {         &amp;#10;                continueRoutine = false;            &amp;#10;            }&amp;#10;        }&amp;#10;}&amp;#10;*/" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (registerResponse === 1) {&amp;#10;&amp;#10;    // get the selected option among the labels&amp;#10;    compChoiceText = sliderLabels[compChoice-1]; // -1 because label index starts with 0, tick mark starts with 1. &amp;#10;&amp;#10;    // get browser zoom&amp;#10;    browserZoom = window.outerWidth*100 / window.innerWidth;&amp;#10;    // register data&amp;#10;    data_zoomLevel.push(browserZoom);&amp;#10;    data_compChoice.push(compChoiceText) // chosen option is registered as text&amp;#10;    data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;    data_itemType.push(&quot;minisurvey&quot;);  // item type (what appeared on the screen)&amp;#10;    data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;    data_miniRating.push(compChoice) // rating of the likert scale&amp;#10;    data_blockName.push(blockName); // what is the name of this block &amp;#10;    data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;    data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;    data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;    data_dateTime.push(util.MonotonicClock.getDateStr()); // date and time &amp;#10;    data_passageRT.push([]); // words per minute&amp;#10;&amp;#10;}&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="updateAndRegisterMini" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_mini">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_mini" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="miniSurveySlider.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseMiniSurvey">
        <Param val="nextButton_mini" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseMiniSurvey" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="final" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="condition" valType="str" updates="None" name="startType"/>
        <Param val="miniSurveySlider.rating" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="demographicInstructions">
      <TextComponent name="text_3">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="text_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="On the following pages you will answer a set of questions about yourself.&amp;#10;&amp;#10;You will encounter 'fill in the box' and multiple-choice questions in the following section.&amp;#10;&amp;#10;Please press the SPACE BAR to advance to the next page." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_6">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_6" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_6">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="text_3.setAlignHoriz('left')&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_6" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="setTrialParametersDemographic">
      <CodeComponent name="getTrialParametersDemographic">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// setup trial parameters&amp;#10;trialproperties = thisStimulus_listD[&quot;trialproperties&quot;] // cell that indicates the number of passages and questions&amp;#10;trialproperties = trialproperties.split(&quot;;&quot;) &amp;#10;//passage counts&amp;#10;likertCount = trialproperties[0]&amp;#10;likertCount = Number(likertCount[likertCount.length-1]) // get the last element (count)&amp;#10;//question counts&amp;#10;textboxCount = trialproperties[1]&amp;#10;textboxCount = Number(textboxCount[textboxCount.length-1]) // get the last element (count)&amp;#10;//randomization of questions within a set (1= yes, 0=no)&amp;#10;randomizeQuestions = trialproperties[2]&amp;#10;randomizeQuestions = Number(randomizeQuestions[randomizeQuestions.length-1]) // get the last element (count)&amp;#10;&amp;#10;// create likert questions' index array&amp;#10;rand_lo = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = range(0, likertCount), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    rand_lo.push(_pj_c+1);&amp;#10;}&amp;#10;console.log(rand_po)&amp;#10;// create textbox questions' index array&amp;#10;rand_to = [];//[1,2,3,4,5,6,7,8,9,10];&amp;#10;for (var i, _pj_c = 0, _pj_a = range(0, textboxCount), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    rand_to.push(_pj_c+1);&amp;#10;}&amp;#10;&amp;#10;if (randomizeQuestions === 1) {&amp;#10;     rand_lo = randomArrayShuffle(rand_lo);&amp;#10;     rand_to = randomArrayShuffle(rand_to);&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;// what is this trial: practice or test?&amp;#10;trialType = thisStimulus_listD['trialType'];&amp;#10;// increase trial iteration index for each iteration of stimulus list&amp;#10;trialIteration = trialIteration +1;&amp;#10;totalTrialIterationIndex = totalTrialIterationIndex+1;&amp;#10;&amp;#10;blockName = &quot;demographic_scale&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="getTrialParametersDemographic" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="displayDemographicQuestions">
      <CodeComponent name="initiateQuestionDemographic">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// create the excel column name that represents the current question text&amp;#10;questionIdentifier  = ('ques'+((rand_lo[likert_trials.thisN]).toString())+'text')&amp;#10;labelIdentifier     = ('ques'+((rand_lo[likert_trials.thisN]).toString())+'label')&amp;#10;itemIDIdentifier    = ('ques'+((rand_lo[likert_trials.thisN]).toString())+'ID')&amp;#10;// call the question text &amp;#10;currentQuestionItem         = thisStimulus_listD[questionIdentifier];&amp;#10;currentQuestionItem         = currentQuestionItem.split(&quot;;&quot;) &amp;#10;currentQuestionDescription  = currentQuestionItem[0] // label for this question, used for registry&amp;#10;currentQuestionDemographic  = currentQuestionItem[1] // question text itself&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID                      = thisStimulus_listD[itemIDIdentifier]+currentQuestionDescription;&amp;#10;// change additional question text's centering and style&amp;#10;questionTextDemographic.setAlignHoriz('left')&amp;#10;questionTextDemographic.bold = true;&amp;#10;pressSpaceTextDemographic.setAlignHoriz('left')&amp;#10;pressSpaceTextDemographic.bold = true;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initiateQuestionDemographic" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="questionTextDemographic">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionTextDemographic" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentQuestionDemographic" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressSpaceTextDemographic">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressSpaceTextDemographic" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(questionsXaxis, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$&quot;﻿Click on the black circle to the left of the statement you choose\n\n&quot; + &quot;Please press the SPACE BAR to advance to the next page after your choice.&quot;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <SliderComponent name="questionSliderDemographic">
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="True" valType="bool" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="1" valType="num" updates="constant" name="granularity"/>
        <Param val="" valType="code" updates="None" name="initVal"/>
        <Param val="" valType="list" updates="constant" name="labels"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="questionSliderDemographic" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="sliderPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="constant" name="readOnly"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="sliderSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="condition" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeHistory"/>
        <Param val="True" valType="bool" updates="constant" name="storeRating"/>
        <Param val="True" valType="bool" updates="constant" name="storeRatingTime"/>
        <Param val="()" valType="list" updates="constant" name="styleTweaks"/>
        <Param val="radio" valType="str" updates="constant" name="styles"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="(1, 2, 3)" valType="list" updates="constant" name="ticks"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </SliderComponent>
      <CodeComponent name="updateAndRegisterDemographic">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="////////////////////////////////////////////////&amp;#10;//// UPDATE SLIDER LABELS, SIZE, COLOR ETC. ////&amp;#10;////////////////////////////////////////////////&amp;#10;&amp;#10;// get slider labels from the excel file&amp;#10;sliderLabels = thisStimulus_listD[labelIdentifier];&amp;#10;sliderLabels = sliderLabels.split(&quot;;&quot;);&amp;#10;sliderLabels.unshift(&quot;Prefer not to answer&quot;);&amp;#10;labelCount   = (sliderLabels.length);&amp;#10;// create tick marks so that data registry makes sense in terms of scores of each &amp;#10;// label: start from 1 not 0.&amp;#10;tickMarks = range(1,labelCount);&amp;#10;&amp;#10;// display shuffled labels as tick marks &amp;#10;questionSliderDemographic.setLabels(sliderLabels);&amp;#10;// change ticks of the slider&amp;#10;questionSliderDemographic.setTicks(tickMarks);    &amp;#10;// change font of the slider text&amp;#10;questionSliderDemographic.setFontSize(questionTextSize*y_scale);&amp;#10;// adjust slider's position and size&amp;#10;questionSliderDemographic._pos = sliderPosition;&amp;#10;questionSliderDemographic._size = sliderSize;&amp;#10;// change slider's color and marker properties&amp;#10;questionSliderDemographic._lineColor = &quot;black&quot;;&amp;#10;questionSliderDemographic._tickColor = &quot;white&quot;;&amp;#10;questionSliderDemographic._markerColor = &quot;white&quot;;&amp;#10;questionSliderDemographic._tickSize= 15;&amp;#10;questionSliderDemographic._markerSize_px = 7;&amp;#10;&amp;#10;//////////////////////////////////////////////////////////////////&amp;#10;// initiate input monitoring for conditional next-page command &amp;#10;// (next page command does not work unless participant chose one of &amp;#10;// the labels. &amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if thisIteration['itemType'] != None:&amp;#10;    sliderLabelsInPy = thisIteration['sliderLabels']; # for some reason it does not accept labels from excel, so I assign another variable for it&amp;#10;    sliderLabelsInPy = sliderLabelsInPy.split(&quot;;&quot;)&amp;#10;    #print(sliderLabelsInPy)&amp;#10;&amp;#10;    labelCount = len(sliderLabelsInPy)&amp;#10;    tickMarks = list(range(labelCount))&amp;#10;    tickMarks = [x+1 for x in tickMarks]&amp;#10;&amp;#10;        &amp;#10;    # create new slider with updated labels&amp;#10;    comp_question = visual.Slider(win=win, name='comp_question',&amp;#10;        startValue=None, size=(.01, .2), pos=(-.75, -.1), units=None,&amp;#10;        labels=sliderLabelsInPy, ticks=tickMarks, granularity=1.0,&amp;#10;        style='radio', styleTweaks=(), opacity=None,&amp;#10;        color='Black', fillColor='White', borderColor='Black', colorSpace='rgb',&amp;#10;        font='Arial', labelHeight=normFontSize,&amp;#10;        flip=True,labelWrapWidth = generalWrapWidth, depth=-3, readOnly=False)&amp;#10;    question_text.setAlignHoriz('left')&amp;#10;    #for label in comp_question.labelObjs:&amp;#10;           # label.height = generalFontSize  # Or whatever size you want    &amp;#10;            #label.wrapWidth = 5" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="compChoice = questionSliderDemographic.getRating();&amp;#10;&amp;#10;if (compChoice &gt;= 1 &amp;&amp; compChoice &lt;= labelCount) {&amp;#10;    if (clearEventAfterChoice === 1){&amp;#10;        psychoJS.eventManager.clearEvents(); // clears keypress events after choice so that previous unrelated space &amp;#10;        clearEventAfterChoice=0;             // does not terminate the loop prematurely        &amp;#10;        }&amp;#10;    &amp;#10;    var _pj;&amp;#10;    function _pj_snippets(container) {&amp;#10;        function in_es6(left, right) {&amp;#10;            if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;                return (right.indexOf(left) &gt; (- 1));&amp;#10;            } else {&amp;#10;                if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                    return right.has(left);&amp;#10;                } else {&amp;#10;                    return (left in right);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        container[&quot;in_es6&quot;] = in_es6;&amp;#10;        return container;&amp;#10;    }&amp;#10;&amp;#10;    _pj = {};&amp;#10;    _pj_snippets(_pj);&amp;#10;    keys = psychoJS.eventManager.getKeys();&amp;#10;    &amp;#10;        if (keys.length) {&amp;#10;            if (_pj.in_es6(&quot;space&quot;, keys)) {         &amp;#10;                continueRoutine = false;            &amp;#10;            }&amp;#10;        }&amp;#10;}&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="// get the selected option among the labels&amp;#10;compChoiceText = sliderLabels[compChoice-1]; // -1 because label index starts with 0, tick mark starts with 1. &amp;#10;&amp;#10;isGender = currentQuestionDescription === &quot;gender&quot;;&amp;#10;isVision = currentQuestionDescription === &quot;visionCorrection&quot;;&amp;#10;if (isGender === true){&amp;#10;        participantGender = (sliderLabels[compChoice-1]);&amp;#10;    }&amp;#10;&amp;#10;if (isVision === true) {&amp;#10;        participantVision = (sliderLabels[compChoice-1]);&amp;#10;    }&amp;#10;&amp;#10;// get the zoom level of browser&amp;#10;var browserZoom = window.outerWidth*100 / window.innerWidth;&amp;#10;// register data&amp;#10;data_miniRating.push([]); // empty because there is no rating but only accuracy for comprehension questionsdata_compChoice.push(compChoiceText); // empty because there is no choice during passages&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_itemType.push(&quot;likert_demographic&quot;);  // item type (what appeared on the screen)&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy in demographic likert questions&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;data_dateTime.push(util.MonotonicClock.getDateStr()); // date and time &amp;#10;data_passageRT.push([]); // words per minute&amp;#10;data_compChoice.push(compChoiceText); // chosen option registered as text&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="updateAndRegisterDemographic" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="textBoxQuestions">
      <CodeComponent name="initiateTextbox">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// create the excel column name that represents the current question text&amp;#10;questionIdentifier  = ('textbox'+((rand_to[textbox_trials.thisN]).toString())+'text')&amp;#10;itemIDIdentifier    = ('textbox'+((rand_to[textbox_trials.thisN]).toString())+'ID')&amp;#10;// call the question text &amp;#10;currentTextboxItem              = thisStimulus_listD[questionIdentifier];&amp;#10;currentTextboxItem              = currentTextboxItem.split(&quot;;&quot;) &amp;#10;currentTextboxDescription       = currentTextboxItem[0] // label for this question, used for registry&amp;#10;currentTextboxTextDemographic   = currentTextboxItem[1] // question text itself&amp;#10;console.log(&quot;text box items&quot;,currentTextboxItem);&amp;#10;// what is the item type (passage, comp question, mini survey?)&amp;#10;itemID                          = thisStimulus_listD[itemIDIdentifier]+currentTextboxDescription;&amp;#10;// determine which of the text box question is about to be displayed&amp;#10;// this is done to change the instructions regarding how to fill out &amp;#10;// the textbox depending on the question. &amp;#10;isMail      = currentTextboxDescription === &quot;email&quot;;&amp;#10;isAge       = currentTextboxDescription === &quot;age&quot;;&amp;#10;isOtherText = (isAge || isMail) === false;&amp;#10;console.log(&quot;ismail&quot;,isMail,&quot;isAge&quot;,isAge,&quot;isOtherText&quot;,isOtherText);&amp;#10;// change additional question text's centering and style&amp;#10;question_textbox.setAlignHoriz('left')&amp;#10;question_textbox.bold = true;&amp;#10;pressSpaceTextTextbox.setAlignHoriz('left')&amp;#10;pressSpaceTextTextbox.bold = true;&amp;#10;// start Timer for 500 ms periods to scan for the text &amp;#10;myClock.reset(); // reset the timer&amp;#10;startTime = myClock.getTime();&amp;#10;&amp;#10;&amp;#10;// conditional instructions on how to fill out the text box &amp;#10;if (isMail === true) {&amp;#10;        // how to fill the mail textbox&amp;#10;        textBoxFill = &quot;&quot;;&amp;#10;        pressSpaceTextFill = &quot;Do not use spaces, enter a valid email format: example@gmail.com\n\n&quot;;&amp;#10;    }&amp;#10;if (isAge === true) {&amp;#10;        // how to fill the age textbox&amp;#10;        textBoxFill = &quot;&quot;;&amp;#10;        pressSpaceTextFill =&quot;Do not use spaces, enter your age in numbers; example: 31\n\n&quot;;&amp;#10;    }&amp;#10;if (isOtherText === true) {&amp;#10;        // how to fill other textboxes&amp;#10;        textBoxFill = &quot;&quot;;&amp;#10;        pressSpaceTextFill = &quot;Do not use paragraph breaks at the start or end of your response \n\n&quot;;&amp;#10;    }" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="initiateTextbox" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextboxComponent name="fill_textbox">
        <Param val="center-left" valType="str" updates="constant" name="alignment"/>
        <Param val="center-left" valType="str" updates="constant" name="anchor"/>
        <Param val="True" valType="bool" updates="constant" name="autoLog"/>
        <Param val="False" valType="bool" updates="constant" name="bold"/>
        <Param val="black" valType="color" updates="constant" name="borderColor"/>
        <Param val="30" valType="num" updates="constant" name="borderWidth"/>
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="editable"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="False" valType="bool" updates="constant" name="italic"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="25" valType="num" updates="constant" name="letterHeight"/>
        <Param val="1.0" valType="num" updates="constant" name="lineSpacing"/>
        <Param val="fill_textbox" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="0" valType="num" updates="constant" name="padding"/>
        <Param val="textboxPosition" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="textboxSize" valType="list" updates="set every repeat" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$textBoxFill" valType="str" updates="set every repeat" name="text"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </TextboxComponent>
      <CodeComponent name="getTextFill">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;psychoJS.eventManager.clearEvents();&amp;#10;clearEventAfterChoice = 1;&amp;#10;fill_textbox.refresh()&amp;#10;console.log(&quot;text box items&quot;,fill_textbox);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="myClock.reset();&amp;#10;startTime = myClock.getTime();&amp;#10;// get the text inside the text box&amp;#10;textInput = fill_textbox._pixi.text;&amp;#10;textInput = textInput.trim();&amp;#10;// check if text input contains &quot;@&quot; and &quot;.&quot; for mail input and not SPACES&amp;#10;//containsSpace = (textInput.indexOf(' ') === -1);&amp;#10;containsMail = ((textInput.indexOf('@') &gt; -1) &amp;&amp; (textInput.indexOf('.') &gt; -1) &amp;&amp;  (textInput.indexOf(&quot;example&quot;) === -1));&amp;#10;containsMail = containsMail;&amp;#10;//console.log('contains mail')&amp;#10;//console.log(containsMail);&amp;#10;// allow continue only if age input consists of two characters, does not check for number type&amp;#10;validAge = (textInput.length &gt;= 2); &amp;#10;anyCharacterTyped = (textInput.length &gt;= 1); &amp;#10;isNumber = isNaN(textInput) === false; //this condition returns true when input is a number&amp;#10;validAge = validAge &amp;&amp; isNumber; &amp;#10;&amp;#10;if (clearEventAfterChoice === 1){&amp;#10;    psychoJS.eventManager.clearEvents();    // clears keypress events&amp;#10;                                            // does not terminate the loop prematurely        &amp;#10;    }&amp;#10;&amp;#10;if ((isMail &amp;&amp; containsMail) || (isAge &amp;&amp; validAge) || (isOtherText &amp;&amp; anyCharacterTyped)) {&amp;#10;    //fill_textbox.borderColor= [0, 1, 0];&amp;#10;    if (clearEventAfterChoice === 1){&amp;#10;        psychoJS.eventManager.clearEvents(); // clears keypress events after choice so that previous unrelated space &amp;#10;        clearEventAfterChoice=0;             // does not terminate the loop prematurely        &amp;#10;        }&amp;#10;    var _pj;&amp;#10;    function _pj_snippets(container) {&amp;#10;        function in_es6(left, right) {&amp;#10;            if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;                return (right.indexOf(left) &gt; (- 1));&amp;#10;            } else {&amp;#10;                if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                    return right.has(left);&amp;#10;                } else {&amp;#10;                    return (left in right);&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        container[&quot;in_es6&quot;] = in_es6;&amp;#10;        return container;&amp;#10;    }&amp;#10;&amp;#10;    _pj = {};&amp;#10;    _pj_snippets(_pj);&amp;#10;    keys = psychoJS.eventManager.getKeys();&amp;#10;    console.log(keys);&amp;#10;        if (keys.length) {&amp;#10;            if (_pj.in_es6(&quot;return&quot;, keys)) {         &amp;#10;                continueRoutine = false;            &amp;#10;            } else {&amp;#10;                    psychoJS.eventManager.clearEvents();&amp;#10;                }&amp;#10;        }&amp;#10;} else {&amp;#10;        //fill_textbox.borderColor= [1, 0, 0];&amp;#10;        psychoJS.eventManager.clearEvents(); &amp;#10;    }" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="if (isAge===true) {&amp;#10;        participantAge = textInput;&amp;#10;    }&amp;#10;&amp;#10;// get browser zoom&amp;#10;browserZoom = window.outerWidth*100 / window.innerWidth;&amp;#10;// register data&amp;#10;data_zoomLevel.push(browserZoom);&amp;#10;data_compChoice.push(textInput) // written text is registered as text&amp;#10;data_itemID.push(itemID); // item ID is the unique ID assigned to each stimulus displayed on the screen&amp;#10;data_itemType.push(&quot;textbox_demographic&quot;); // item type (what appeared on the screen)&amp;#10;data_compAccuracy.push([]); // empty because there is no accuracy during passages &amp;#10;data_miniRating.push([]) // rating of the likert scale&amp;#10;data_blockName.push(blockName); // what is the name of this block &amp;#10;data_trialType.push(trialType); // is this a test or a practice trial&amp;#10;data_passageFont.push(currentFont); // what was the font used in this passage&amp;#10;data_totalTrialIndex.push(totalTrialIterationIndex); // what is the trial number (total across all blocks)&amp;#10;data_dateTime.push(util.MonotonicClock.getDateStr()); // date and time &amp;#10;data_passageRT.push([]); // words per minute&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="partAge = fill_textbox.text" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="getTextFill" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="question_textbox">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="question_textbox" valType="code" updates="None" name="name"/>
        <Param val="1" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter,questionsTopYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$currentTextboxTextDemographic + &quot; (enter the text into box below)&quot;" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="pressSpaceTextTextbox">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="questionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="pressSpaceTextTextbox" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, questionsBottomYaxis)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$(pressSpaceTextFill+ &quot;Please press the ENTER to advance to the next page after you type in.&quot;)" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="writeDataToFile">
      <CodeComponent name="writeToFile">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="// write trial by trial data&amp;#10;trialColumNames = [&quot;trialNo&quot;,&quot;itemID&quot; ,&quot;blockName&quot;, &quot;trialType&quot;, &quot;FontName&quot;, &quot;wordsPerMinute&quot;, &quot;comprehensionAccuracy&quot;, &quot;comprehensionChoice&quot;,&quot;miniSurveyRating&quot;];&amp;#10;iterationCountTrials = data_totalTrialIndex.length;&amp;#10;&amp;#10;// add headers right above the data &amp;#10;psychoJS.experiment.addData(&quot;dateTime&quot;, &quot;dateTime&quot;)&amp;#10;psychoJS.experiment.addData(trialColumNames[0], trialColumNames[0]);&amp;#10;psychoJS.experiment.addData(&quot;subid&quot;, &quot;subid&quot;)&amp;#10;psychoJS.experiment.addData(&quot;counterbalanceGroup&quot;, &quot;counterbalanceGroup&quot;)&amp;#10;psychoJS.experiment.addData(trialColumNames[1], trialColumNames[1]);&amp;#10;psychoJS.experiment.addData(trialColumNames[2], trialColumNames[2]);&amp;#10;psychoJS.experiment.addData(trialColumNames[3], trialColumNames[3]);&amp;#10;psychoJS.experiment.addData(trialColumNames[4], trialColumNames[4]);&amp;#10;psychoJS.experiment.addData(trialColumNames[5], trialColumNames[5]);&amp;#10;psychoJS.experiment.addData(trialColumNames[6], trialColumNames[6]);&amp;#10;psychoJS.experiment.addData(trialColumNames[7], trialColumNames[7]);&amp;#10;psychoJS.experiment.addData(trialColumNames[8], trialColumNames[8]);&amp;#10;psychoJS.experiment.addData(&quot;X_Scale&quot;, &quot;X_Scale&quot;);&amp;#10;psychoJS.experiment.addData(&quot;Y_Scale&quot;, &quot;Y_Scale&quot;);&amp;#10;psychoJS.experiment.addData(&quot;IsFullScreen&quot;, &quot;IsFullScreen&quot;)&amp;#10;psychoJS.experiment.addData(&quot;window_width&quot;, &quot;window_width&quot;)&amp;#10;psychoJS.experiment.addData(&quot;window_height&quot;, &quot;window_height&quot;)&amp;#10;psychoJS.experiment.addData(&quot;browser&quot;, &quot;browser&quot;)&amp;#10;psychoJS.experiment.addData(&quot;browserZoomLevel&quot;, &quot;browserZoomLevel&quot;)&amp;#10;psychoJS.experiment.nextEntry();&amp;#10;&amp;#10;// write data in long format&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(0, iterationCountTrials), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    psychoJS.experiment.addData(&quot;dateTime&quot;, data_dateTime[i])&amp;#10;    psychoJS.experiment.addData(trialColumNames[0], data_totalTrialIndex[i]);&amp;#10;    psychoJS.experiment.addData(&quot;subid&quot;, participantCode)&amp;#10;    psychoJS.experiment.addData(&quot;counterbalanceGroup&quot;, thisGroup.group)&amp;#10;    psychoJS.experiment.addData(trialColumNames[1], data_itemID[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[2], data_blockName[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[3], data_trialType[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[4], data_passageFont[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[5], data_passageRT[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[6], data_compAccuracy[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[7], data_compChoice[i]);&amp;#10;    psychoJS.experiment.addData(trialColumNames[8], data_miniRating[i]);&amp;#10;    thisExp.addData(&quot;X_Scale&quot;, x_scale);&amp;#10;    thisExp.addData(&quot;Y_Scale&quot;, y_scale);&amp;#10;    psychoJS.experiment.addData(&quot;IsFullScreen&quot;, psychoJS.window._windowAlreadyInFullScreen)&amp;#10;    psychoJS.experiment.addData(&quot;window_width&quot;, psychoJS.window._size[0])&amp;#10;    psychoJS.experiment.addData(&quot;window_height&quot;, psychoJS.window._size[1])&amp;#10;    psychoJS.experiment.addData(&quot;browser&quot;, psychoJS._browser)&amp;#10;    psychoJS.experiment.addData(&quot;browserZoomLevel&quot;, data_zoomLevel[i])&amp;#10;    psychoJS.experiment.nextEntry();&amp;#10;}" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="&amp;#10;&amp;#10;#from os.path import exists&amp;#10;pathToFolder = &quot;E:\\Backups\\All Files\\Genel\\Is\\2022\\Upwork\\LabX\\readingExperiment2&quot;&amp;#10;outputFile = 'output.txt'&amp;#10;fullPath = pathToFolder+outputFile&amp;#10;#file_exists = exists(fullPath)&amp;#10;file_exists = 1&amp;#10;# register participant average data to all participant output file&amp;#10;if file_exists == 1:&amp;#10;    # append to existing data file &amp;#10;    with open(fullPath, 'a') as f:&amp;#10;        f.write('\t'.join(participantAverageData[0:]) + '\n')                  &amp;#10;elif file_exists == 0:&amp;#10;    # create new data file if there is no prior output data&amp;#10;    with open(fullPath, 'w') as f:&amp;#10;        f.write('\t'.join(averagedColumNames[0:]) + '\n')&amp;#10;        f.write('\t'.join(participantAverageData[0:]) + '\n')&amp;#10;               &amp;#10;        &amp;#10;# register trial by trial data of current participant&amp;#10;trialColumNames = ['trialNo','blockName','trialType','FontName','wordsPerMinute','comprehensionAccuracy','comprehensionChoice']&amp;#10;with open(pathToFolder+expInfo['participant']+'.txt', 'w') as f:&amp;#10;    numberRows = len(data_totalTrialIndex)&amp;#10;    f.write('\t'.join(trialColumNames[0:]) + '\n')&amp;#10;    for i in range(0,numberRows):        &amp;#10;        f.write(str(data_totalTrialIndex[i]) + &quot;\t&quot; + str(data_blockName[i]) + &quot;\t&quot; + str(data_trialType[i]) + &quot;\t&quot; +str(data_passageFont[i])+ &quot;\t&quot; +str(data_passageRT[i]) + &quot;\t&quot; +str(data_compAccuracy[i]) + &quot;\t&quot; +str(data_compChoice[i]) +&quot;\n&quot;)&amp;#10;        " valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="writeToFile" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="finalInstructions">
      <CodeComponent name="code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="accuracyPercentage = Math.round((accuracyTotal[0] / accuracyTotal[1]) * 100)&amp;#10;&amp;#10;thanksText = &quot;Thank you for participating!\n\n&quot;&amp;#10;&amp;#10;fastestFontText = &quot;You read fastest in &quot; + fastestFontLabel + &quot; font.\n\n&quot;;&amp;#10;&amp;#10;fastestWpmText = &quot;You've read &quot; + (Math.round(maxWPM)).toString() + &quot; words per minute with your fastest font.\n\n&quot;;&amp;#10;&amp;#10;accuracyText = &quot;You've had &quot; + accuracyPercentage.toString() + &quot;% accuracy on the comprehension questions.\n\n&quot;;&amp;#10;&amp;#10;furtherQuestionText = &quot;﻿﻿If you have further questions, email team@readabilitylab.xyz\n﻿\n&quot;&amp;#10;&amp;#10;formLinkText = &quot;Thank you for your interest in the Virtual Readability Lab! Join our mailing list to be informed of future readability tests and research conducted by the VRL and The Readability Consortium. Simply click on the form link below.&quot;&amp;#10;&amp;#10;&amp;#10;wholeFinalInstruction = thanksText+fastestFontText+fastestWpmText+accuracyText+furtherQuestionText+formLinkText;&amp;#10;finish_instructions.setAlignHoriz('left');&amp;#10;&amp;#10;&amp;#10;formLinkX = hsize * 3/10;&amp;#10;formLinkY = 0-(vsize * 3/10);&amp;#10;&amp;#10;websiteLinkX = 0-(hsize * 3/10);&amp;#10;websiteLinkY = 0-(vsize * 3/10);" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (redirectMouse.isPressedIn(formLink)) {&amp;#10;    psychoJS.setRedirectUrls('https://forms.gle/CeJH17fwSuennK5i9','');&amp;#10;    continueRoutine= false&amp;#10;    }&amp;#10;&amp;#10;&amp;#10;if (redirectMouse.isPressedIn(websiteLink)) {&amp;#10;    psychoJS.setRedirectUrls('https://readabilitylab.xyz','');&amp;#10;    continueRoutine= false&amp;#10;    }&amp;#10;    " valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="finish_instructions">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="finish_instructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$wholeFinalInstruction" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="formLink">
        <Param val="-1.0000, -1.0000, 1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="constant" name="letterHeight"/>
        <Param val="formLink" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(formLinkX, formLinkY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Fill out the form" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="websiteLink">
        <Param val="-1.0000, -1.0000, 1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="constant" name="letterHeight"/>
        <Param val="websiteLink" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(websiteLinkX, websiteLinkY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Return to our website" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="redirectMouse">
        <Param val="formLink,websiteLink" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="redirectMouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="final" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="informedConsent">
      <TextComponent name="informedConsentText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="informedConsentText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="EXPLANATION OF RESEARCH&amp;#10;&amp;#10;Title of Project: Online Readability Study for Children&amp;#10;Principal Investigator: Dr. Ben D. Sawyer ? Dr. Stephanie Day&amp;#10;Other Investigators: David B. Miller&amp;#10;&amp;#10;You are being invited to take part in a research study. Whether you take part is up to you.&amp;#10;&amp;#10;The study aims to investigate differences in legibility between typefaces in short passages by varying the fonts and line spacings.&amp;#10;&amp;#10;We expect that you will be in this research study and demographic survey for one session of approximately 40 minutes. If you choose to participate and complete the study, you will receive \$8.00 as indicated on the online platform (Prolific).&amp;#10;&amp;#10;Please press the SPACE BAR to continue to next page. &amp;#10;&amp;#10;Page 1" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_2" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="align">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="informedConsentText.setAlignHoriz(&quot;left&quot;);&amp;#10;&amp;#10;console.log(informedConsentText)&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="align" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="general_instructions">
      <TextComponent name="generalInstructionsText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="generalInstructionsText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Welcome to the Online Readability Study with Variable Fonts&amp;#10;&amp;#10;Before beginning the study, you will be asked some demographic survey questions online. You may choose to skip any of these questions you do not wish to answer, and you can still participate in the study. The actual experiment is delivered over the internet using the study platform Pavlovia. &amp;#10;&amp;#10;You will first be asked to resize an image on the screen using a credit/debit card to calibrate the display size, prior to starting the study. You will be asked to read short passages and answer multiple-choice comprehension questions based on those reading passages. The text is written at a 12th-grade reading level. Your responses will be recorded using key presses on a keyboard.&amp;#10;&amp;#10;Please press the SPACE BAR to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_5">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_5" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_3">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="generalInstructionsText.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_3" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="waitForNormalization">
      <CodeComponent name="normalizationCode">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="//// CAUTION ABOUT THE ORDER OF FONT FAMILY NAMES AND DIRECTORIES ////&amp;#10;&amp;#10;// place the family name and directory of the practice font in the first element ALWAYS&amp;#10;// in the example below the practice font is Arial&amp;#10;fontNames = ['ArialNormalized','GaramondNormalized','LexendNormalized','MontserratNormalized','NotoSansNormalized','RobotoNormalized','TimesNormalized'];&amp;#10;fontDirectories = ['fonts/ArialFont.woff','fonts/Garamond.woff','fonts/LexendDeca.woff','fonts/Montserrat.woff','fonts/NotoSans.woff','fonts/Roboto.woff','fonts/TimesNew.woff'];&amp;#10;howManyFonts = 7;&amp;#10;normalized_xsizes = {};&amp;#10;heightDifferences = {};" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="waitFor10Secs_2.setAlignHoriz(&quot;center&quot;);&amp;#10;normiteration= normalizeFontTrials.thisN;&amp;#10;console.log('norm iteration', normiteration)&amp;#10;yourX = gen_normalization(fontDirectories[normiteration],fontNames[normiteration],fontNames[normiteration])&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="normXsize = yourX; &amp;#10;console.log('norm output',normXsize)&amp;#10;// create normalized font size &amp;#10;customXsize=[]&amp;#10;customXsize = Math.ceil(baseSizePixels * normXsize * passageSizeMultiplier); &amp;#10;console.log('custom norm size',customXsize)&amp;#10;&amp;#10;// register normalized font size (for display) in pixels&amp;#10;normalized_xsizes[fontNames[normiteration]] = customXsize;&amp;#10;console.log('normalized vector',normalized_xsizes)&amp;#10;// estimate the height difference for Y axis shift&amp;#10;HeightDif=[]&amp;#10;HeightDif = ((baseSizePixels)-Math.ceil(baseSizePixels * normXsize))*2;&amp;#10;&amp;#10;// adjust for Y axis shift after normalization&amp;#10;if (HeightDif &lt; 0) {&amp;#10;        HeightDif = Math.ceil(HeightDif);&amp;#10;    } else {&amp;#10;            HeightDif = Math.floor(-HeightDif);&amp;#10;        }        &amp;#10;heightDifferences[fontNames[normiteration]] = HeightDif;&amp;#10;console.log(fontNames[normiteration],'normSize',normXsize,'height difference',HeightDif);&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="normalizationCode" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="waitFor10Secs_2">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="waitFor10Secs_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="We are calibrating the test files for you. &amp;#10;&amp;#10;This shouldn't take more than 10 seconds.&amp;#10;&amp;#10;Please wait until the test instructions appear on the screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_8">
        <Param val="" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_8" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="waitFor10Seconds">
      <TextComponent name="waitFor10Secs">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="waitFor10Secs" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="6" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="The test will start 10 seconds after this text disappears.&amp;#10;&amp;#10;Please wait for your next set of instructions to appear on the screen." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_7">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="waitFor10Secs.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="code_7" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="registerNormalization"/>
    <Routine name="generalInstructions2">
      <TextComponent name="generalInstructionsText_2">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="generalInstructionsText_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="This test consists of several parts. The 1st part is a warm-up. Then you will complete 6 short rounds of reading passagess and comprehension questions.&amp;#10;&amp;#10;During the reading sections, please read as quickly as you can, without reading out-loud or re-reading. However, be prepared to answer comprehension questions about the passage. You must select an answer to each question and press the button at the bottom of the screen to advance to the next page.&amp;#10;&amp;#10;If you want to take a break, please do so while on an instruction page, not during the reading rounds as the timer will be running.&amp;#10;&amp;#10;If you have questions, contact the primary investigator: Ben D. Sawyer, team@readabilitylab.xyz&amp;#10;&amp;#10;Please sit at arm's length from the screen and try not to move your chair or move the distance of your head relative to the screen. Do not refresh the browser as it will reset the test.&amp;#10;&amp;#10;Please press the button below to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_9">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_9" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_8">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="generalInstructionsText_2.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_8" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_Instructions">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_Instructions" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseInstructions">
        <Param val="nextButton_Instructions" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseInstructions" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="findFastest">
      <CodeComponent name="newBest">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="currentDictionaryWpm = + wpm; &amp;#10;currentDictionaryDivisor =  + 1;&amp;#10;averageFontWpm = []&amp;#10;wpmDictionary = []&amp;#10;fontWpm = []&amp;#10;fontDivisior = []&amp;#10;fontAverageWpm = []&amp;#10;&amp;#10;for (var i = 0; i &lt; blockFontCount; i++) {&amp;#10;  wpmDictionary = getFastestFont[blockFonts[i]];&amp;#10;  fontWpm = wpmDictionary[0];&amp;#10;  fontDivisior = wpmDictionary[1];&amp;#10;  fontAverageWpm = fontWpm / fontDivisior;&amp;#10;  averageFontWpm[i] = fontAverageWpm;&amp;#10;}&amp;#10;&amp;#10;console.log('avg wpm array',averageFontWpm);&amp;#10;maxWPM = []&amp;#10;minWPM = []&amp;#10;maxIndex = []&amp;#10;minIndex = []&amp;#10;&amp;#10;&amp;#10;maxWPM = Math.max(...averageFontWpm);&amp;#10;minWPM = Math.min(...averageFontWpm);&amp;#10;&amp;#10;maxIndex = averageFontWpm.indexOf(maxWPM);&amp;#10;minIndex = averageFontWpm.indexOf(minWPM);&amp;#10;&amp;#10;fastestFont = blockFonts[maxIndex];  // using calculated fastest font&amp;#10;fastestFontLabel = blockFontLabels[maxIndex];&amp;#10;console.log('fastest wpm',maxWPM);&amp;#10;console.log('fastest font',fastestFont);&amp;#10;console.log('fastest font label',fastestFontLabel)&amp;#10;&amp;#10;slowestFont = blockFonts[minIndex];  // using calculated fastest font&amp;#10;slowestFontLabel = blockFontLabels[minIndex];&amp;#10;console.log('slowest wpm',minWPM);&amp;#10;console.log('slowest font',slowestFont);&amp;#10;console.log('slowest font label',slowestFontLabel)  " valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="newBest" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <CodeComponent name="findBestFont">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="&amp;#10;// if this is a testing block (blockName = &quot;testFastest&quot;) where fastest &amp;#10;// font OR other typographical parameters are found. &amp;#10;if ((blockName === &quot;testFastest&quot;)) {&amp;#10;    data_blockName2= data_blockName;        // create backup &amp;#10;    data_passageFont2 = data_passageFont;   // create backup &amp;#10;    // extract unique block names &amp;#10;    var uniqueTestBlockNames = data_blockName2.filter((item, i, ar) =&gt; ar.indexOf(item) === i);&amp;#10;    // extract unique font names&amp;#10;    var uniqueFontNames = data_passageFont2.filter((item2, ik, arr) =&gt; arr.indexOf(item2) === ik);&amp;#10;&amp;#10;    // remove the first font name which is the practice font&amp;#10;    // practice font is the first font in the blockFontsForDisplay string array. &amp;#10;    // we will delete this font from the unique font names to exclude practice trials&amp;#10;    // from fastest and slowest calculations. &amp;#10;    &amp;#10;    /*&amp;#10;    practiceFont = blockFontsForDisplay[0];&amp;#10;    for( var i = 0; i &lt; uniqueFontNames.length; i++){     &amp;#10;        if ( uniqueFontNames[i] === practiceFont) {     &amp;#10;           uniqueFontNames.splice(i, 1); &amp;#10;        }    &amp;#10;    }&amp;#10;    */&amp;#10;    numberOfFonts = uniqueFontNames.length;&amp;#10;    fontRTarray = [];&amp;#10;    fontDivisionArray = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(0, numberOfFonts), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        fontRTarray.push(0);&amp;#10;        fontDivisionArray.push(0);&amp;#10;    }&amp;#10;&amp;#10;    // get the numeric index of passage items&amp;#10;    getIndexPassage = findIndices(data_itemType, &quot;passage&quot;); &amp;#10;    &amp;#10;    // check variables on console&amp;#10;    console.log('number of fonts',numberOfFonts);&amp;#10;    console.log('block names',uniqueTestBlockNames);&amp;#10;    console.log('font names',uniqueFontNames);&amp;#10;    console.log('font RT array',fontRTarray);&amp;#10;    console.log('passage indices', getIndexPassage);&amp;#10;    &amp;#10;    for (var passidx1, _pj_c = 0, _pj_a = getIndexPassage, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        passidx1 = _pj_a[_pj_c];&amp;#10;        &amp;#10;        currentFontType = data_passageFont[passidx1];&amp;#10;        &amp;#10;        currentRT = parseFloat(data_passageRT[passidx1]);&amp;#10;&amp;#10;        var getFontRTIdx = findIndices(uniqueFontNames, currentFontType);&amp;#10;        getFontRTIdx = getFontRTIdx[0];&amp;#10;        fontRTarray[getFontRTIdx] = (fontRTarray[getFontRTIdx] + currentRT);&amp;#10;        fontDivisionArray[getFontRTIdx] = parseFloat((fontDivisionArray[getFontRTIdx] + 1));&amp;#10;        &amp;#10;        &amp;#10;        // check variables on console&amp;#10;        console.log('below index for current font', passidx1);&amp;#10;        console.log('below currentFontType', currentFontType);&amp;#10;        console.log('current RT',currentRT);&amp;#10;&amp;#10;    }&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(0, numberOfFonts), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        fontRTarray[i] = (fontRTarray[i] / fontDivisionArray[i]);&amp;#10;    }&amp;#10;    // get the minimum and maximum RTs&amp;#10;    const RTKeys = Object.keys(fontRTarray);&amp;#10;    &amp;#10;    const RTValues = RTKeys.map(key =&gt; {&amp;#10;      return fontRTarray[key];&amp;#10;    });    &amp;#10;&amp;#10;    const slowestReadingSpeed = Math.max.apply(null, RTValues);&amp;#10;&amp;#10;    const fastestReadingSpeed = Math.min.apply(null, RTValues);&amp;#10;    &amp;#10;    var getIndexFastestFont = fontRTarray.indexOf(fastestReadingSpeed);&amp;#10;    var getIndexSlowestFont = fontRTarray.indexOf(slowestReadingSpeed);&amp;#10;    var fastestFont = uniqueFontNames[getIndexFastestFont];&amp;#10;    var slowestFont = uniqueFontNames[getIndexSlowestFont];&amp;#10;    &amp;#10;    &amp;#10;    // check variables on console&amp;#10;    console.log(&quot;RT keys&quot;,RTKeys); // 👉️ ['num1', 'num2', 'num3', 'num4']&amp;#10;    console.log(&quot;RT values&quot;,RTValues); // 👉️ [10, 20, 5, 15]&amp;#10;    console.log('below slowest speed', slowestReadingSpeed);&amp;#10;    console.log('below fastest  speed', fastestReadingSpeed);&amp;#10;    console.log('below fastest index1', getIndexFastestFont);&amp;#10;    console.log('below slowest index', getIndexSlowestFont);&amp;#10;    console.log('below fastest font', uniqueFontNames[getIndexFastestFont]);&amp;#10;    console.log('below slowest font', uniqueFontNames[getIndexSlowestFont]);    &amp;#10;}&amp;#10;console.log('font RT array',fontRTarray)&amp;#10;console.log('unique font names',uniqueFontNames)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if totalBlockIterationIndx == 1:&amp;#10;    uniqueTestBlockNames = list(set(data_blockName))&amp;#10;    uniqueFontNames = list(set(data_passageFont))&amp;#10;    uniqueFontNames.remove('Arial')&amp;#10;    numberOfFonts = len(uniqueFontNames)&amp;#10;    #print(uniqueTestBlockNames)&amp;#10;    print(uniqueFontNames)&amp;#10;    #create font-specific RT array&amp;#10;    fontRTarray =[]&amp;#10;    fontDivisionArray =[]&amp;#10;    for i in range(0,numberOfFonts):&amp;#10;        fontRTarray.append(0)&amp;#10;        fontDivisionArray.append(0)        &amp;#10;    getIndexPassage         = find_blockNames(data_trialType,'passage')&amp;#10;    # extract RTs for each font name&amp;#10;    for passidx1 in getIndexPassage:&amp;#10;        currentFontType     = data_passageFont[passidx1] # get font name of current index&amp;#10;        currentRT           = data_passageRT[passidx1] # get RT of current index&amp;#10;        getFontRTIdx        = find_blockNames(uniqueFontNames,currentFontType) # get the index of current font among unique font list for RT registry specific to each font name&amp;#10;        getFontRTIdx        = getFontRTIdx[0] # convert list to integer for indexing &amp;#10;        fontRTarray[getFontRTIdx] = fontRTarray[getFontRTIdx] + currentRT # add current RT to the currently processed font name&amp;#10;        fontDivisionArray[getFontRTIdx] = fontDivisionArray[getFontRTIdx] +1 # add 1 for dividing sum of all RT of a font name later on&amp;#10;    # divide sum of RTs to get mean reading speed for each font name&amp;#10;    for i in range(0,numberOfFonts):&amp;#10;        fontRTarray[i] = fontRTarray[i] /fontDivisionArray[i]&amp;#10;    &amp;#10;    fastestReadingSpeed = min(fontRTarray)&amp;#10;    slowestReadingSpeed = max(fontRTarray)&amp;#10;    getIndexFastestFont = find_blockNames(fontRTarray,fastestReadingSpeed) # get index of the fastest font name&amp;#10;    getIndexFastestFont = getIndexFastestFont[0] # convert list to integer for indexing&amp;#10;    getIndexSlowestFont = find_blockNames(fontRTarray,slowestReadingSpeed)# get index of the slowest font name&amp;#10;    getIndexSlowestFont = getIndexSlowestFont[0] # convert list to integer for indexing&amp;#10;    &amp;#10;    # define fastest and slowest fonts for stimulus display in later experimental blocks&amp;#10;    fastestFont = uniqueFontNames[getIndexFastestFont]&amp;#10;    slowestFont = uniqueFontNames[getIndexSlowestFont]&amp;#10;    &amp;#10;print(fontRTarray)&amp;#10;print(uniqueFontNames)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="findBestFont" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="informedConsent2">
      <TextComponent name="informedConsentText_4">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="informedConsentText_4" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Before beginning the study, you will be asked some demographic survey questions online. You may choose to skip any of these questions you do not wish to answer, and you can still participate in the study. The actual experiment is delivered over the internet using the study platform Pavlovia. &amp;#10;&amp;#10;You will first be asked to resize an image on the screen using a credit/debit card to calibrate the display size, prior to starting the study. You will be asked to read short passages and answer multiple-choice comprehension questions based on those reading passages. The text is written at a 12th-grade reading level. Your responses will be recorded using key presses on a keyboard.&amp;#10;&amp;#10;Please press the SPACE BAR to continue to next page. &amp;#10;&amp;#10;Page 2" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_11">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_11" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="align_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="informedConsentText_4.setAlignHoriz(&quot;left&quot;);&amp;#10;&amp;#10;console.log(informedConsentText)" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="align_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="informedConsent3">
      <TextComponent name="informedConsentText_2">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="informedConsentText_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="This is a minimal risk study and does not present any more risk than your regular use of a computer. Participation is voluntary and you may withdraw at any time. There is no direct benefit to you from taking part in this study. However, the research has the potential to contribute to scientific knowledge of different modes of reading legibility and typefaces with variable fonts.&amp;#10;&amp;#10;All data will be collected digitally. The website will generate a random user ID and no personally identifiable information will be collected. All data will be stored in Google Drive for a minimum of 5 years after the study's closure. The data of google drive is password protected and will only have access to the study team members.&amp;#10;&amp;#10;Please press the SPACE BAR  if you agree to participate in the study.&amp;#10;&amp;#10;Page 3" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_7">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_7" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_2">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="informedConsentText_2.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_2" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="informedConsent4">
      <TextComponent name="informedConsentText_3">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize*y_scale" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="informedConsentText_3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Organizations that may access your information include the IRB, investigators, and research team members of this study.&amp;#10;You must be between the ages of 18 and 75 years old and have normal (20/20) vision or corrected-to-normal vision to take part in this research study.&amp;#10;&amp;#10;Study contacts for questions about the study or to report a problem: If you have questions, concerns, or complaints or think the research has hurt you, talk to the research team or in Industrial Engineering &amp; Management Systems, Dr. Ben D. Sawyer, 484-272-9937,&amp;#10;readabilitylab@ucf.edu. &amp;#10;&amp;#10;IRB contact to ask about your rights in this study or to report a complaint:  If you have questions about your rights as a research participant, or have concerns about the conduct of this study, please contact the Institutional Review Board (IRB), University of Central Florida, Office of Research, 12201 Research Parkway, Suite 501, Orlando, FL 32826-3246, by telephone at (407) 823-2901&amp;#10;&amp;#10;Please press the SPACE BAR  if you agree to participate in the study.&amp;#10;&amp;#10;Page 4" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_10">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_10" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_9">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="informedConsentText_3.setAlignHoriz(&quot;left&quot;);&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_9" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="donotuseSAFARI">
      <KeyboardComponent name="key_resp_12">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_12" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ImageComponent name="welcomeText">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="welcomeText.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="welcomeText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="[1320,726]" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="safariText">
        <Param val="black" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="instructionTextSize" valType="num" updates="set every repeat" name="letterHeight"/>
        <Param val="safariText" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(xAxisCenter, 0)" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Warning: Please do not use Safari while taking this test!&amp;#10;&amp;#10;Warning: This test only works on computers, please do not use your phone to take this test.&amp;#10;&amp;#10;Please press the button below to continue.&amp;#10;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="wrapWidthText" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="code_10">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="//safariText.setAlignHoriz(&quot;left&quot;);&amp;#10;&amp;#10;&amp;#10;nextButton_warning.setSize([buttonWidth,buttonHeight])&amp;#10;nextButton_warning.setPos([buttonX,buttonY])&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_10" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="nextButton_warning">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="next_button.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="nextButton_warning" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(buttonX,buttonY)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(buttonWidth,buttonHeight)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val=".2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <MouseComponent name="mouseWarning">
        <Param val="nextButton_warning" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouseWarning" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on valid click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="True" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="You will be asked to place a credit/debit card onto a card image to resize your screen in the next page. Please place your card on the image and use arrow keys to resize the image and make it the same size as your card." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="initialize"/>
    <Routine name="donotuseSAFARI"/>
    <Routine name="generalInstructions2"/>
    <LoopInitiator loopType="TrialHandler" name="normalizeFontTrials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="howManyFonts" valType="num"/>
      <Param name="name" updates="None" val="normalizeFontTrials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="waitForNormalization"/>
    <LoopTerminator name="normalizeFontTrials"/>
    <LoopInitiator loopType="TrialHandler" name="blocks">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[{'exp_blocks': 'stimuli/newsetformat.xlsx', 'practiceTrials': 1, 'testTrials': 6, 'fontsInvolved': 'RobotoFlex_wght200;RobotoFlex_wght400;RobotoFlex_wght600'}]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="blocks/blocks_1.xlsx" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="blocks" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="setBlockParameters"/>
    <LoopInitiator loopType="TrialHandler" name="stimulus_list">
      <Param name="Selected rows" updates="None" val="$passageSetOrder" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$stimulus_file" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="stimulus_list" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="setTrialParameters"/>
    <Routine name="instructions_passage"/>
    <LoopInitiator loopType="TrialHandler" name="passage_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="passageCount" valType="num"/>
      <Param name="name" updates="None" val="passage_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="displayPassaages"/>
    <LoopTerminator name="passage_trials"/>
    <Routine name="instructions_questions"/>
    <LoopInitiator loopType="TrialHandler" name="question_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="questionCount" valType="num"/>
      <Param name="name" updates="None" val="question_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="displayQuestions"/>
    <LoopTerminator name="question_trials"/>
    <LoopInitiator loopType="TrialHandler" name="minisurvey_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="miniSurveyCount" valType="num"/>
      <Param name="name" updates="None" val="minisurvey_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="displayMiniSurvey"/>
    <LoopTerminator name="minisurvey_trials"/>
    <LoopTerminator name="stimulus_list"/>
    <Routine name="findFastest"/>
    <LoopTerminator name="blocks"/>
    <Routine name="writeDataToFile"/>
    <Routine name="finalInstructions"/>
  </Flow>
</PsychoPy2experiment>
